import compiler.util.*;
import java_cup.runtime.Symbol;


parser code  {:

 public void report_error(String message, Object info){
   StringBuffer m = new StringBuffer("Error: " + message + "\n");
   System.err.print(m);
 }

 public void report_fatal_error(String message, Object info) {
   report_error(message, info);
   throw new RuntimeException("Fatal Syntax Error");
 }
 
 public void syntax_error(Symbol s){
    System.out.println("compiler has detected a syntax error at line " + s.left 
        + " column " + s.right + "\n");
}

:};

/* TERMINAL */
terminal PROGRAM, FUNCTION, PROCEDURE;
terminal BEGIN, END;
terminal CONST;
terminal CASE, DO, WHILE, FOR, REPEAT;
terminal IF, THEN, ELSE;
terminal NOT,OR, AND;
terminal java.lang.String IDENTIFIER;
terminal java.lang.String STRING, STRINGTERMINAL;
terminal java.lang.Number INTEGER_NUMBER;
terminal SEMICOLON, DOT, COLON, LPAREN, RPAREN, COMMA;
terminal EQEQ,DIF,GTEQ,LTEQ,LT,GT,EQ;
terminal PLUS, MINUS, MULT, DIV;
terminal VAR, CONSTANT, ARRAY, SET, TYPE;
terminal BOOLEAN_LITERAL;


/* NON TERMINAL */
non terminal program;
non terminal program_header, block;
non terminal declaration_part, statement_code;
non terminal variable_declaration_part_opt, variable_declaration_part, variable_declaration_part_ext, variable_declaration, variable_sequence_opt;
non terminal const_definition_part_opt, const_definition_part, const_part_ext, const_part, const, constant;
non terminal atribute_part_opt, atribute_part_ext, atribute_part;
non terminal function_declaration_part_opt, function_dcl, function_heading, function_body, function_statement, result_function;
non terminal procedure_declaration_part_opt, procedure_dcl, procedure_heading, procedure_body;
non terminal expression, call_function, function_call_params_opt, function_call_params_ext;
non terminal parameter_list_opt, parameter_list, parameter_section_ext, parameter_section, parameter_type,result_type, type_identifier;
non terminal atribuition_part_opt, atribuition_part_ext, atribuition_part ;
non terminal conditional_part_opt, conditional_part, conditional_part_ext, op_condition, conditional_body, condition ;
non terminal statement_part, statement_body;
non terminal number, boolean;
non terminal expr;
non terminal function_call_opt;

start with program;

program ::=
	program_header block DOT 		{: Logger.print("Program definition"); :}
;

program_header ::=
	PROGRAM IDENTIFIER SEMICOLON 	{: System.out.println("Program header definition"); :}
;

block ::=
	declaration_part 				{: Logger.print("Declaration part");:}
	statement_part					{: Logger.print("Statement part");:}
;

declaration_part ::=
	|
	|const_definition_part_opt	declaration_part		{: Logger.print("Constant part definition"); :}
	|variable_declaration_part_opt 	declaration_part	{: Logger.print("Variable declaration part definition"); :}
	|function_declaration_part_opt	declaration_part	{: Logger.print("Function declaration part definition"); :}
	|procedure_declaration_part_opt	declaration_part	{: Logger.print("Procedure declaration part definition"); :}
;


const_definition_part_opt ::=
	|
	const_definition_part {: Logger.print("Line 79");:}
						
;

const_definition_part ::=
	CONST const SEMICOLON const_part_ext {: Logger.print("Line 84");:}
;

const_part_ext ::=
	|
	const SEMICOLON const_part_ext {: Logger.print("Line 89");:}
;

const ::=
	IDENTIFIER EQ constant {: Logger.print("Line 93");:}
;

constant  ::=
	number {: Logger.print("Line 97");:}
	| IDENTIFIER {: Logger.print("Line 98");:}
	| STRING {: Logger.print("Line 99");:}
	| boolean
;
number ::=
	INTEGER_NUMBER {: Logger.print("Line 102");:}
;

boolean ::=
	BOOLEAN_LITERAL
	|NOT BOOLEAN_LITERAL;

variable_declaration_part_opt ::=
	variable_declaration_part		{: Logger.print("Line 106"); :}
	| {:Logger.print("VAZIO");:}
;

variable_declaration_part ::=
	VAR variable_declaration SEMICOLON variable_declaration_part_ext {: Logger.print("Line 111"); :}
	|VAR variable_declaration variable_declaration_part_ext
;

variable_declaration_part_ext ::=
	|
	variable_declaration SEMICOLON variable_declaration_part_ext	{: Logger.print("Line 116"); :}
;

variable_declaration ::=
	IDENTIFIER variable_sequence_opt COLON IDENTIFIER {: Logger.print("Line 120");:} 
;
variable_sequence_opt ::=
	|
	COMMA IDENTIFIER variable_sequence_opt		
;

statement_part ::=
	|
	BEGIN statement_body END
;

statement_body ::= 
	|
	|expr {: Logger.print("Line 123"); :}
	|atribuition_part_opt	{: Logger.print("Line 124");:}
	|call_function
;

	
function_call_params_opt ::= 
	|
	IDENTIFIER function_call_params_ext
;

function_call_params_ext ::=
	|
	COMMA IDENTIFIER function_call_params_ext;

statement_code ::=
	|
	atribuition_part_opt 	{: Logger.print("Line 133"); :} 
	conditional_part_opt 	{: Logger.print("Line 134"); :}
	result_function			{: Logger.print("Line 135"); :}
	END SEMICOLON
	 
;

atribuition_part_opt ::=
	 |
	 atribuition_part atribuition_part_ext {: Logger.print("Line 142"); :}
;

atribuition_part_ext ::=
	|
	atribuition_part atribuition_part_ext {: Logger.print("Line 147"); :}
;

atribuition_part ::=
	IDENTIFIER COLON EQ expression		   {: Logger.print("Line 159"); :}
	|IDENTIFIER COLON EQ constant SEMICOLON {: Logger.print("Line 158"); :}
	
;
	
expression ::=
	|
	|constant
	|call_function
; 

call_function ::=
	|
	IDENTIFIER LPAREN function_call_params_opt RPAREN SEMICOLON;


conditional_part_opt ::=
	|
	conditional_part{: Logger.print("157"); :}
;

conditional_part ::=
	condition conditional_part_ext  {: Logger.print("162"); :}
;

conditional_part_ext ::=
	|
	condition conditional_part_ext {: Logger.print("Line 167"); :} ;

condition ::=
	IF LPAREN op_condition RPAREN THEN BEGIN conditional_body END					{: Logger.print("Line 170"); :}
	|ELSE IF LPAREN op_condition RPAREN THEN BEGIN conditional_body END			{: Logger.print("Line 171"); :}
	|ELSE BEGIN	conditional_body END										{: Logger.print("Line 172"); :}

;

op_condition ::=
	IDENTIFIER LT IDENTIFIER		{: Logger.print("Line 177"); :}
	|IDENTIFIER GT IDENTIFIER		{: Logger.print("Line 178"); :}
	|IDENTIFIER EQ IDENTIFIER		{: Logger.print("Line 179"); :}
	|IDENTIFIER LTEQ IDENTIFIER		{: Logger.print("Line 180"); :}
	|IDENTIFIER GTEQ IDENTIFIER		{: Logger.print("Line 181"); :}
	|IDENTIFIER DIF IDENTIFIER		{: Logger.print("Line 182"); :}
	|IDENTIFIER EQEQ IDENTIFIER		{: Logger.print("Line 183"); :}

;

conditional_body ::=
	atribuition_part_opt												{: Logger.print("Line 188"); :}
	//IDENTIFIER COLON EQ IDENTIFIER SEMICOLON
;

result_function ::= 
	|
	IDENTIFIER COLON EQ IDENTIFIER SEMICOLON		{: Logger.print("Line 193"); :} ;

function_declaration_part_opt ::=
	|
	function_dcl	{: Logger.print("Line 197"); :}
;

function_dcl ::=
	function_heading function_body{: Logger.print("Line 201"); :}
;

function_heading ::=
	FUNCTION IDENTIFIER LPAREN parameter_list_opt RPAREN COLON result_type SEMICOLON {: Logger.print("Line 205"); :}
;

parameter_list_opt ::=
	|
	parameter_list {: Logger.print("Line 210");:}
;

parameter_list ::=
	parameter_section parameter_section_ext {: Logger.print("Line 214");:}
;

parameter_section_ext ::=
	 |
	 SEMICOLON parameter_section parameter_section_ext {: Logger.print("Line 219");:}
;

type_identifier ::=
	IDENTIFIER {: Logger.print("Line 223");:}
;

parameter_section ::=
	IDENTIFIER COLON parameter_type {: Logger.print("Line 227"); :}
;

parameter_type ::=
	type_identifier {: Logger.print("Line 231");:}
;

result_type ::=
	type_identifier {: Logger.print("Line 235");:}
;

function_body ::= 
	variable_declaration_part_opt BEGIN function_statement   {: Logger.print("239");:}

;
	
function_statement ::=
	statement_code {: Logger.print("Line 244"); :};
	
procedure_declaration_part_opt ::=
	|
	procedure_dcl	{: Logger.print("Line 197"); :}
;

procedure_dcl ::=
	procedure_heading procedure_body{: Logger.print("Line 201"); :}
;

procedure_heading ::=
	PROCEDURE IDENTIFIER LPAREN variable_declaration_part_opt RPAREN SEMICOLON{: Logger.print("Line 205"); :}
;

procedure_body ::=
	BEGIN function_statement   {: Logger.print("287");:}
;



expr ::=
		expr PLUS expr
	|	expr MINUS expr
	|	expr MULT expr
	|	expr DIV expr
	|	INTEGER_NUMBER
;





