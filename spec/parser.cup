import compiler.util.*;
import java_cup.runtime.Symbol;


parser code  {:

 public void report_error(String message, Object info){
   StringBuffer m = new StringBuffer("Error: " + message + "\n");
   System.err.print(m);
 }

 public void report_fatal_error(String message, Object info) {
   report_error(message, info);
   throw new RuntimeException("Fatal Syntax Error");
 }
 
 public void syntax_error(Symbol s){
    System.out.println("compiler has detected a syntax error at line " + s.left 
        + " column " + s.right + "\n");
}

:};

/* TERMINAL */
terminal PROGRAM, FUNCTION, PROCEDURE;
terminal BEGIN, END, FILE, WITH;
terminal CONST, OF, UNTIL, TO;
terminal CASE, LABEL, DO, WHILE, GOTO, FOR, REPEAT;
terminal IF, THEN, ELSE, IN;
terminal NOT,OR, AND, MOD;
terminal java.lang.String IDENTIFIER;
terminal java.lang.String STRING, STRINGTERMINAL;
terminal java.lang.Number INTEGER_NUMBER;
terminal java.lang.Number REAL_NUMBER;
terminal SEMICOLON, DOT, COLON, LPAREN, RPAREN, COMMA, LBRACK, RBRACK, DOT_DOT;
terminal EQEQ,DIF,GTEQ,LTEQ,LT,GT,EQ;
terminal PLUS, MINUS, MULT, DIV;
terminal ASSIGNMENT;
terminal VAR, CONSTANT, ARRAY, SET, TYPE;
terminal BOOLEAN_LITERAL;
terminal TIL, FUNC ;


/* NON TERMINAL */
non terminal program;
non terminal program_header, block;
non terminal declaration_part, statement_code;
non terminal type_definition_part_opt, type_definition_part, type_definition_part_ext, type_definition, type;
non terminal simple_type, subrange_type, enumerated_type, structured_type;
non terminal set_type;
non terminal constant_ext, base_type;  
non terminal variable_declaration_part_opt, variable_declaration_part, variable_declaration_part_ext, variable_declaration, variable_sequence_opt;
non terminal const_definition_part_opt, const_definition_part, const_part_ext, const_part, const, constant, list_of_identifiers;
non terminal atribute_part_opt, atribute_part_ext, atribute_part;
non terminal function_declaration_part_opt, function_dcl, function_heading, function_body, function_statement, result_function;
non terminal procedure_declaration_part_opt, procedure_dcl, procedure_heading, procedure_body;
non terminal call_function, function_call_params_opt, function_call_params_ext;
non terminal parameter_list_opt, parameter_list, parameter_section_ext, parameter_section, parameter_type,result_type, type_identifier;
non terminal atribuition_part_opt, atribuition_part_ext, atribuition_part ;
non terminal conditional_part_opt, conditional_part, conditional_part_ext, op_condition, conditional_body, condition ;
non terminal statement_part, statement_body, statement_aux, statement_ext;
non terminal statement, simple_statement, structured_statement, simple_statement_aux;
non terminal conditional_statement, if_statement, else_opt, else_aux, else_direct_aux, elseif_opt;
non terminal number, boolean;
non terminal expr;
non terminal expression, expression_ext, simple_expression, rel_op_opt, logical_op_opt;
non terminal term, factor, operator, operator_opt, sign, set, element_list;
non terminal function_call_opt;
non terminal procedure_and_function_declaration_part, procedure_and_function_declaration_part_opt;
non terminal procedure_declaration;
non terminal formal_parameter_list_opt, formal_parameter_list, formal_parameter_section, formal_parameter_section_ext;
non terminal value_parameter_section, variable_parameter_section;
non terminal conformant_array_schema,  unpacked_conformant_array_schema;
non terminal bound_specification, bound_specification_ext, ordinal_type_identifier;
non terminal function_declaration;

start with program;


program ::=
	program_header block DOT 											{: Logger.print("Program definition"); :}
;

program_header ::=
	PROGRAM IDENTIFIER SEMICOLON 										{: System.out.println("Program header definition"); :}
;

block ::=
	declaration_part 													{: Logger.print("Declaration part");:}
	statement_part														{: Logger.print("Statement part");:}
;

declaration_part ::=
	|
	|const_definition_part_opt declaration_part							{: Logger.print("Constant part definition"); :}
	|type_definition_part_opt declaration_part							{: Logger.print("Type definition part"); :}
	|variable_declaration_part_opt declaration_part						{: Logger.print("Variable declaration part definition"); :}
	|procedure_and_function_declaration_part_opt declaration_part		{: Logger.print("Procedure and function declaration part definition"); :}
;

list_of_identifiers ::=
	|
	|IDENTIFIER COMMA list_of_identifiers 								{:Logger.print("Line 103"); :}
	|IDENTIFIER   														{:Logger.print("Line 104"); :}
	|STRING   															{:Logger.print("Line 105"); :}
	|expression   														{:Logger.print("Line 106"); :}
;


const_definition_part_opt ::=
	|																	{: Logger.print("Line 111");:}
	const_definition_part											 	{: Logger.print("Line 112");:}
						
;

const_definition_part ::=
	CONST const SEMICOLON const_part_ext 								{: Logger.print("Line 117");:}
;

const_part_ext ::=
	|																	{: Logger.print("Line 121");:}
	const SEMICOLON const_part_ext 										{: Logger.print("Line 122");:}
;

const ::=
	IDENTIFIER EQ constant 												{: Logger.print("Line 126");:}
;

constant  ::=
	number 																{: Logger.print("Line 130");:}
	| IDENTIFIER														{: Logger.print("Line 131");:}
	| STRING 															{: Logger.print("Line 132");:}
	| boolean 															{: Logger.print("Line 133");:}
	| NOT boolean 														{: Logger.print("Line 134");:}
;
number ::=
	INTEGER_NUMBER 														{: Logger.print("Line 137");:}
	| REAL_NUMBER	 													{: Logger.print("Line 138");:}
;

boolean ::=
	BOOLEAN_LITERAL 													{: Logger.print("Line 142");:}
	|NOT BOOLEAN_LITERAL												{: Logger.print("Line 143");:}
;


type_definition_part_opt ::=
	|	type_definition_part 											{: Logger.print("Line 148");:}
;

type_definition_part ::= 
	TYPE type_definition SEMICOLON type_definition_part_ext 			{: Logger.print("Line 152");:}
;

type_definition_part_ext ::=
	type_definition SEMICOLON type_definition_part_ext					{: Logger.print("Line 156");:}
	| 																	{: Logger.print("Line 157");:}
;

type_definition ::=
	IDENTIFIER EQ type													{: Logger.print("Line 161");:}
;

type ::= 
	  simple_type														{: Logger.print("Line 165");:}
	| structured_type													{: Logger.print("Line 166");:}
	| type_identifier													{: Logger.print("Line 167");:}
;

simple_type ::=
      subrange_type														{: Logger.print("Line 171");:}
	| enumerated_type													{: Logger.print("Line 172");:}
;

subrange_type ::=
	constant DOT_DOT constant											{: Logger.print("Line 176");:}
;

enumerated_type ::= 
	LPAREN list_of_identifiers RPAREN									{: Logger.print("Line 180");:}
;

structured_type ::= 
	set_type															{: Logger.print("Line 184");:}
;

constant_ext ::=
	|																	{: Logger.print("Line 188");:}
	COMMA constant constant_ext											{: Logger.print("Line 189");:}
;

set_type ::=
	SET OF base_type													{: Logger.print("Line 193");:}
;

base_type ::=
	type																{: Logger.print("Line 197");:}
;


variable_declaration_part_opt ::=
	variable_declaration_part											{: Logger.print("Line 202"); :}
	| 																	{: Logger.print("Line 203"); :}
;

variable_declaration_part ::=
	VAR variable_declaration SEMICOLON variable_declaration_part_ext {: Logger.print("Line 111"); :}
	|VAR variable_declaration variable_declaration_part_ext
;

variable_declaration_part_ext ::=
	|
	variable_declaration SEMICOLON variable_declaration_part_ext	{: Logger.print("Line 116"); :}
;

variable_declaration ::=
	IDENTIFIER variable_sequence_opt COLON IDENTIFIER {: Logger.print("Line 120");:} 
;
variable_sequence_opt ::=
	|
	COMMA IDENTIFIER variable_sequence_opt		
;


//COMECOU PROCEDURE_FUNCTION
procedure_and_function_declaration_part_opt ::=
	|
	procedure_and_function_declaration_part
;

procedure_and_function_declaration_part ::=
	|
	| procedure_declaration SEMICOLON procedure_and_function_declaration_part
	| function_declaration SEMICOLON procedure_and_function_declaration_part
;

procedure_declaration ::=
	procedure_heading SEMICOLON procedure_body
;

procedure_heading ::=
	PROCEDURE IDENTIFIER formal_parameter_list_opt
;

procedure_body ::=
	block
;

formal_parameter_list_opt ::=
	|
	formal_parameter_list
;

formal_parameter_list ::=
	LPAREN formal_parameter_section formal_parameter_section_ext RPAREN
;

formal_parameter_section_ext ::=
	|
	SEMICOLON formal_parameter_section formal_parameter_section_ext
;

formal_parameter_section ::=
	  value_parameter_section
	| variable_parameter_section
;

value_parameter_section ::= 
	list_of_identifiers COLON parameter_type
;

parameter_type ::= 
	type_identifier
	| conformant_array_schema //mudar esse nome
;

conformant_array_schema ::= 
	ARRAY LBRACK bound_specification bound_specification_ext RBRACK OF type_identifier
;

bound_specification_ext ::=
	|
	SEMICOLON bound_specification bound_specification_ext	
;

bound_specification ::= 
	IDENTIFIER DOT_DOT IDENTIFIER COLON type_identifier
;

variable_parameter_section ::=
	VAR list_of_identifiers COLON parameter_type
;

function_heading ::= 
	FUNCTION IDENTIFIER formal_parameter_list_opt COLON result_type
;

result_type ::=
	type_identifier
;

function_declaration ::=
	function_heading SEMICOLON function_body
;

function_body ::= 
	block
;

//TERMINOU PROCEDURE_FUNCTION


//COMECOU STATEMENT_PART

statement_part ::=
	| 											{: Logger.print("Line 316");:}
	BEGIN statement_aux END 					{: Logger.print("Line 317");:}
;

statement_aux ::= 
	statement statement_ext						{: Logger.print("Line 321");:}
;

statement_ext ::=
	|											{: Logger.print("Line 325");:}
	SEMICOLON statement statement_ext			{: Logger.print("Line 326");:}
;

statement ::=
	|											{: Logger.print("Line 330");:}
	| simple_statement							{: Logger.print("Line 331");:}
	| structured_statement						{: Logger.print("Line 332");:}
;

simple_statement ::=
	|											{: Logger.print("Line 336");:}
	| IDENTIFIER simple_statement_aux			{: Logger.print("Line 337");:}
	| expression								{: Logger.print("Line 338");:}
;

simple_statement_aux ::=
	ASSIGNMENT expression						{: Logger.print("Line 342");:}
	| LPAREN list_of_identifiers RPAREN			{: Logger.print("Line 343");:}
;

structured_statement ::=
	conditional_statement						{: Logger.print("Line 347");:}
;

conditional_statement ::=
	  if_statement								{: Logger.print("Line 351");:}
;

if_statement ::=
	IF expression THEN statement SEMICOLON else_aux					{: Logger.print("Line 355");:}
;

else_aux ::=
	|											{: Logger.print("Line 359");:}
	|if_statement								{: Logger.print("Line 360");:}
	|ELSE else_direct_aux						{: Logger.print("Line 361");:}
;

else_direct_aux ::=								{: Logger.print("Line 364");:}
	|elseif_opt									{: Logger.print("Line 365");:}
	|else_opt									{: Logger.print("Line 366");:}
;

elseif_opt ::=
	IF  expression  THEN statement SEMICOLON else_aux				{: Logger.print("Line 370");:}

;

else_opt ::= 
	| 											{: Logger.print("Line 375");:}
	statement 									{: Logger.print("Line 376");:}
;


//TERMINOU STATEMENT_PART



statement_body ::= 
	|
	|expr statement_body									{: Logger.print("Line 386"); :}
	|atribuition_part_opt statement_body 					{: Logger.print("Line 387");:}
	|TIL call_function statement_body
;

	
function_call_params_opt ::= 
	|														{: Logger.print("Line 393");:}
	IDENTIFIER function_call_params_ext						{: Logger.print("Line 394");:}
;

function_call_params_ext ::=
	|														{: Logger.print("Line 398");:}
	COMMA IDENTIFIER function_call_params_ext;

statement_code ::= 		//TIRAR AQUI
	|														{: Logger.print("Line 402");:}
	atribuition_part_opt 									{: Logger.print("Line 403"); :} 
	conditional_part_opt 									{: Logger.print("Line 404"); :}
	result_function											{: Logger.print("Line 405"); :}
	END SEMICOLON											{: Logger.print("Line 406");:}
	 
;

atribuition_part_opt ::=
	 |														{: Logger.print("Line 411");:}
	 atribuition_part atribuition_part_ext 					{: Logger.print("Line 412"); :}
;

atribuition_part_ext ::=
	|														{: Logger.print("Line 416");:}
	atribuition_part atribuition_part_ext 					{: Logger.print("Line 417"); :}
;

atribuition_part ::=
	IDENTIFIER ASSIGNMENT expression		   				{: Logger.print("Line 421"); :}		//ATENÇÃO
	|IDENTIFIER ASSIGNMENT constant SEMICOLON 				{: Logger.print("Line 422"); :}
	
;	
expression ::= 
	|														{: Logger.print("Line 426");:}
	simple_expression 										{: Logger.print("Line 427");:}
	rel_op_opt		 										{: Logger.print("Line 428");:}										
	logical_op_opt  										{: Logger.print("Line 429");:}
	simple_expression 										{: Logger.print("Line 430");:}
; 

simple_expression ::=
	| 														{: Logger.print("Line 434");:}
	|term operator_opt expression							{: Logger.print("Line 435");:}
	| sign term operator_opt 								{: Logger.print("Line 436");:}
;

operator_opt ::= 
	| 														{: Logger.print("Line 440");:}
	operator term operator_opt								{: Logger.print("Line 441");:}
;

sign ::=
	  PLUS
	| MINUS
;

term ::=
	|
	|  factor
	| PLUS term
	| MINUS term
	| MULT term
	| DIV term
	| MOD term
;

logical_op_opt ::=
	|
	| AND
	| OR	
;

rel_op_opt ::=
	|
	| EQ expression
	| DIF expression
	| LT expression
	| LTEQ expression
	| GT expression
	| GTEQ expression
;

factor ::=
	|
	|  LPAREN expression RPAREN
	| IDENTIFIER
	| call_function
	| NOT factor
	| constant
	| set
;


call_function ::=
	|
	IDENTIFIER LPAREN function_call_params_opt RPAREN SEMICOLON
;

set ::=
	LBRACK element_list RBRACK
;

element_list ::=
	|
	expression expression_ext
;
	
	
expression_ext ::=
	|
	COMMA expression expression_ext 
;	


conditional_part_opt ::=
	|
	conditional_part{: Logger.print("157"); :}
;

conditional_part ::=
	condition conditional_part_ext  {: Logger.print("162"); :}
;

conditional_part_ext ::=
	|
	condition conditional_part_ext {: Logger.print("Line 167"); :} ;

condition ::=
	IF LPAREN op_condition RPAREN THEN BEGIN conditional_body END					{: Logger.print("Line 170"); :}
	|ELSE IF LPAREN op_condition RPAREN THEN BEGIN conditional_body END			{: Logger.print("Line 171"); :}
	|ELSE BEGIN	conditional_body END										{: Logger.print("Line 172"); :}

;

op_condition ::=
	IDENTIFIER LT IDENTIFIER		{: Logger.print("Line 177"); :}
	|IDENTIFIER GT IDENTIFIER		{: Logger.print("Line 178"); :}
	|IDENTIFIER EQ IDENTIFIER		{: Logger.print("Line 179"); :}
	|IDENTIFIER LTEQ IDENTIFIER		{: Logger.print("Line 180"); :}
	|IDENTIFIER GTEQ IDENTIFIER		{: Logger.print("Line 181"); :}
	|IDENTIFIER DIF IDENTIFIER		{: Logger.print("Line 182"); :}
	|IDENTIFIER EQEQ IDENTIFIER		{: Logger.print("Line 183"); :}

;

conditional_body ::=
	atribuition_part_opt												{: Logger.print("Line 188"); :}
	//IDENTIFIER COLON EQ IDENTIFIER SEMICOLON
;

result_function ::= 
	|
	IDENTIFIER ASSIGNMENT IDENTIFIER SEMICOLON		{: Logger.print("Line 193"); :} ;

function_declaration_part_opt ::= 		//TIRAR AQUI
	|
	function_dcl	{: Logger.print("Line 197"); :}
;

function_dcl ::= 		//TIRAR AQUI
	function_heading function_body{: Logger.print("Line 201"); :}
;

/*function_heading ::= 		//TIRAR AQUI
	FUNCTION IDENTIFIER LPAREN parameter_list_opt RPAREN COLON result_type SEMICOLON {: Logger.print("Line 205"); :}
;*/

parameter_list_opt ::= 		//TIRAR AQUI
	|
	parameter_list {: Logger.print("Line 210");:}
;

parameter_list ::= 		//TIRAR AQUI
	parameter_section parameter_section_ext {: Logger.print("Line 214");:}
;

parameter_section_ext ::= 		//TIRAR AQUI
	 |
	 SEMICOLON parameter_section parameter_section_ext {: Logger.print("Line 219");:}
;

type_identifier ::= 		//TIRAR AQUI
	IDENTIFIER {: Logger.print("Line 223");:}
;

parameter_section ::= 		//TIRAR AQUI
	IDENTIFIER COLON parameter_type {: Logger.print("Line 227"); :}
;

parameter_type ::= 		//TIRAR AQUI
	type_identifier {: Logger.print("Line 231");:}
;

result_type ::= 		//TIRAR AQUI
	type_identifier {: Logger.print("Line 235");:}
;

/*function_body ::=  		//TIRAR AQUI
	variable_declaration_part_opt BEGIN function_statement   {: Logger.print("239");:}
;*/
	
function_statement ::=  		//TIRAR AQUI
	statement_code {: Logger.print("Line 244"); :};
	
procedure_declaration_part_opt ::=
	|
	procedure_dcl	{: Logger.print("Line 197"); :}
;

procedure_dcl ::=
	procedure_heading procedure_body{: Logger.print("Line 201"); :}
;

/*procedure_heading ::=
	PROCEDURE IDENTIFIER LPAREN variable_declaration_part_opt RPAREN SEMICOLON{: Logger.print("Line 205"); :}
;*/

/*procedure_body ::=
	BEGIN function_statement   {: Logger.print("287");:}
;*/



expr ::=
	|
	|	expr PLUS expr
	|	expr MINUS expr
	|	expr MULT expr
	|	expr DIV expr
	|	INTEGER_NUMBER
;





