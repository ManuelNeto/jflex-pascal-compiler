import compiler.util.*;
import java_cup.runtime.Symbol;


parser code  {:

 public void report_error(String message, Object info){
   StringBuffer m = new StringBuffer("Error: " + message + "\n");
   System.err.print(m);
 }

 public void report_fatal_error(String message, Object info) {
   report_error(message, info);
   throw new RuntimeException("Fatal Syntax Error");
 }
 
 public void syntax_error(Symbol s){
    System.out.println("compiler has detected a syntax error at line " + s.left 
        + " column " + s.right + "\n");
}

:};


/* TERMINAL */
terminal PROGRAM;
terminal IDENTIFIER, BEGIN, END;
terminal SEMICOLON, DOT, COLON;
terminal PLUS, MINUS, MULT, DIV;
terminal java.lang.Number INTEGER_NUMBER;
terminal VAR;


/* NON TERMINAL */
non terminal program;
non terminal program_header, block;
non terminal declaration_part;
non terminal variable_declaration_part_opt, variable_declaration_part, variable_declaration_part_ext, variable_declaration;
non terminal statement_part;
non terminal expr;

start with program;

program ::=
	program_header block DOT 		{: Logger.print("Program definition"); :}
;

program_header ::=
	PROGRAM IDENTIFIER SEMICOLON 	{: Logger.print("Program header definition"); :}
;

block ::=
	declaration_part statement_part	{: Logger.print("Block definition");:}
;

declaration_part ::=
	variable_declaration_part_opt 	{: Logger.print("Declaration part definition"); :}
;

variable_declaration_part_opt ::=
	{:Logger.print("VAZIO");:}
	| variable_declaration_part		{: Logger.print("Variable declaration part optional definition"); :}
;

variable_declaration_part ::=
	VAR variable_declaration SEMICOLON variable_declaration_part_ext {: Logger.print("Variable declaration part definition"); :}
;

variable_declaration_part_ext ::=
	{:Logger.print("VAZIO");:}
	| variable_declaration SEMICOLON variable_declaration_part_ext	{: Logger.print("Variable declaration part ext definition"); :}
;

variable_declaration ::=
	IDENTIFIER COLON IDENTIFIER
;

statement_part ::=
	BEGIN expr END {: Logger.print("Statement Part"); :} 
;

expr ::=
		expr PLUS expr
	|	expr MINUS expr
	|	expr MULT expr
	|	expr DIV expr
	|	INTEGER_NUMBER
;





