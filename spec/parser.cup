import compiler.util.*;
import java_cup.runtime.Symbol;


parser code  {:

 public void report_error(String message, Object info){
   StringBuffer m = new StringBuffer("Error: " + message + "\n");
   System.err.print(m);
 }

 public void report_fatal_error(String message, Object info) {
   report_error(message, info);
   throw new RuntimeException("Fatal Syntax Error");
 }
 
 public void syntax_error(Symbol s){
    System.out.println("compiler has detected a syntax error at line " + s.left 
        + " column " + s.right + "\n");
}

:};

/* TERMINAL */
terminal PROGRAM, FUNCTION, PROCEDURE;
terminal BEGIN, END;
terminal CONST;
terminal CASE, DO, WHILE, FOR, REPEAT;
terminal IF, THEN, ELSE;
terminal NOT,OR, AND;
terminal java.lang.String IDENTIFIER;
terminal java.lang.String STRING, STRINGTERMINAL;
terminal java.lang.Number INTEGER_NUMBER;
terminal java.lang.Number REAL_NUMBER;
terminal SEMICOLON, DOT, COLON, LPAREN, RPAREN, COMMA;
terminal EQEQ,DIF,GTEQ,LTEQ,LT,GT,EQ;
terminal PLUS, MINUS, MULT, DIV;
terminal VAR, CONSTANT, ARRAY, SET, TYPE;


/* NON TERMINAL */
non terminal program;
non terminal program_header, block;
non terminal declaration_part, statement_code;
non terminal variable_declaration_part_opt, variable_declaration_part, variable_declaration_part_ext, variable_declaration;
non terminal const_definition_part_opt, const_definition_part, const_part_ext, const_part, const, constant;
non terminal atribute_part_opt, atribute_part_ext, atribute_part;
non terminal function_declaration_part_opt, function_dcl, function_heading, function_body, function_statement; 
non terminal parameter_list_opt, parameter_list, parameter_section_ext, parameter_section, parameter_type,result_type, type_identifier;
non terminal statement_part;
non terminal number;
non terminal expr;

start with program;

program ::=
	program_header block DOT 		{: Logger.print("Program definition"); :}
;

program_header ::=
	PROGRAM IDENTIFIER SEMICOLON 	{: System.out.println("Program header definition"); :}
;

block ::=
	declaration_part statement_part	{: Logger.print("Block definition");:}
;

declaration_part ::=
	const_definition_part_opt		{: Logger.print("Constant part definition"); :}
	variable_declaration_part_opt 	{: Logger.print("Variable Declaration part definition"); :}
	function_declaration_part_opt	{: Logger.print("Function declaration part definition"); :}
	
;

const_definition_part_opt ::=
	const_definition_part {: Logger.print("Constant definition part optional definition");:}
	|					
;

const_definition_part ::=
	CONST const SEMICOLON const_part_ext {: Logger.print("Constant definition part optional definition");:}
;

const_part_ext ::=
	|
	const SEMICOLON const_part_ext
;

const ::=
	IDENTIFIER EQ constant
;

constant  ::=
	number 
	| STRING
;
number ::=
	INTEGER_NUMBER
;

variable_declaration_part_opt ::=
	variable_declaration_part		{: Logger.print("Variable declaration part optional definition"); :}
	| {:Logger.print("VAZIO");:}
;

variable_declaration_part ::=
	VAR variable_declaration SEMICOLON variable_declaration_part_ext {: Logger.print("Variable declaration part definition"); :}
;

variable_declaration_part_ext ::=
	variable_declaration SEMICOLON variable_declaration_part_ext	{: Logger.print("Variable declaration part ext definition"); :}
	| {:Logger.print("VAZIO");:}
;

variable_declaration ::=
	IDENTIFIER COLON IDENTIFIER
;

statement_part ::=
	BEGIN statement_code END {: Logger.print("Statement Part"); :}
	|BEGIN expr END {: Logger.print("Statement Part"); :} 
;

statement_code ::=
	atribute_part_opt atribute_part_ext
;

atribute_part_ext ::=
	|
	atribute_part atribute_part_ext
;

atribute_part_opt ::=
	|
	atribute_part
;

atribute_part ::=
	IDENTIFIER COMMA EQ constant SEMICOLON
;

function_declaration_part_opt ::=
	|
	function_dcl	{: Logger.print("Function Optional declaration"); :}
;

function_dcl ::=
	function_heading SEMICOLON function_body{: Logger.print("Function definition"); :}
;

function_heading ::=
	FUNCTION IDENTIFIER LPAREN parameter_list_opt RPAREN COLON result_type SEMICOLON {: Logger.print("Function heading definition");:}
;

parameter_list_opt ::=
	|
	parameter_list {: Logger.print("Parameter list optional definition");:}
;

parameter_list ::=
	parameter_section parameter_section_ext {: Logger.print("Parameter list definition");:}
;

parameter_section_ext ::=
	 |
	 SEMICOLON parameter_section parameter_section_ext {: Logger.print("Parameter section extended definition");:}
;

type_identifier ::=
	IDENTIFIER {: Logger.print("Type identifier definition");:}
;

parameter_section ::=
	IDENTIFIER COLON parameter_type
;

parameter_type ::=
	type_identifier
;

result_type ::=
	type_identifier {: Logger.print("Result type definition");:}
;

function_body ::= 
	variable_declaration_part_opt BEGIN function_statement END;
	
function_statement ::=
	statement_part
;

expr ::=
		expr PLUS expr
	|	expr MINUS expr
	|	expr MULT expr
	|	expr DIV expr
	|	INTEGER_NUMBER
;





