/* The following code was generated by JFlex 1.6.1 */

package generated;
import java_cup.runtime.*;
import core.PascalSymbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/home/igormcdp/compiladores/jflex-pascal-compiler/spec/pascal.flex</tt>
 */
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\15\1\11\1\0\1\15\1\14\22\0\1\15\6\0\1\10"+
    "\1\45\1\46\1\55\1\3\1\47\1\4\1\7\1\56\1\5\11\6"+
    "\1\44\1\43\1\53\1\52\1\54\2\0\32\12\1\50\1\0\1\51"+
    "\1\60\1\12\1\0\1\22\1\24\1\32\1\30\1\25\1\35\1\21"+
    "\1\40\1\26\2\12\1\36\1\23\1\27\1\20\1\16\1\12\1\17"+
    "\1\33\1\34\1\37\1\41\1\42\1\12\1\31\1\12\1\1\1\0"+
    "\1\2\1\57\53\0\1\12\12\0\1\12\4\0\1\12\5\0\27\12"+
    "\1\0\37\12\1\0\u01ca\12\4\0\14\12\16\0\5\12\7\0\1\12"+
    "\1\0\1\12\201\0\5\12\1\0\2\12\2\0\4\12\1\0\1\12"+
    "\6\0\1\12\1\0\3\12\1\0\1\12\1\0\24\12\1\0\123\12"+
    "\1\0\213\12\10\0\246\12\1\0\46\12\2\0\1\12\7\0\47\12"+
    "\110\0\33\12\5\0\3\12\55\0\53\12\25\0\12\13\4\0\2\12"+
    "\1\0\143\12\1\0\1\12\17\0\2\12\7\0\2\12\12\13\3\12"+
    "\2\0\1\12\20\0\1\12\1\0\36\12\35\0\131\12\13\0\1\12"+
    "\16\0\12\13\41\12\11\0\2\12\4\0\1\12\5\0\26\12\4\0"+
    "\1\12\11\0\1\12\3\0\1\12\27\0\31\12\107\0\23\12\121\0"+
    "\66\12\3\0\1\12\22\0\1\12\7\0\12\12\4\0\12\13\1\0"+
    "\20\12\4\0\10\12\2\0\2\12\2\0\26\12\1\0\7\12\1\0"+
    "\1\12\3\0\4\12\3\0\1\12\20\0\1\12\15\0\2\12\1\0"+
    "\3\12\4\0\12\13\2\12\23\0\6\12\4\0\2\12\2\0\26\12"+
    "\1\0\7\12\1\0\2\12\1\0\2\12\1\0\2\12\37\0\4\12"+
    "\1\0\1\12\7\0\12\13\2\0\3\12\20\0\11\12\1\0\3\12"+
    "\1\0\26\12\1\0\7\12\1\0\2\12\1\0\5\12\3\0\1\12"+
    "\22\0\1\12\17\0\2\12\4\0\12\13\25\0\10\12\2\0\2\12"+
    "\2\0\26\12\1\0\7\12\1\0\2\12\1\0\5\12\3\0\1\12"+
    "\36\0\2\12\1\0\3\12\4\0\12\13\1\0\1\12\21\0\1\12"+
    "\1\0\6\12\3\0\3\12\1\0\4\12\3\0\2\12\1\0\1\12"+
    "\1\0\2\12\3\0\2\12\3\0\3\12\3\0\14\12\26\0\1\12"+
    "\25\0\12\13\25\0\10\12\1\0\3\12\1\0\27\12\1\0\20\12"+
    "\3\0\1\12\32\0\2\12\6\0\2\12\4\0\12\13\25\0\10\12"+
    "\1\0\3\12\1\0\27\12\1\0\12\12\1\0\5\12\3\0\1\12"+
    "\40\0\1\12\1\0\2\12\4\0\12\13\1\0\2\12\22\0\10\12"+
    "\1\0\3\12\1\0\51\12\2\0\1\12\20\0\1\12\21\0\2\12"+
    "\4\0\12\13\12\0\6\12\5\0\22\12\3\0\30\12\1\0\11\12"+
    "\1\0\1\12\2\0\7\12\37\0\12\13\21\0\60\12\1\0\2\12"+
    "\14\0\7\12\11\0\12\13\47\0\2\12\1\0\1\12\2\0\2\12"+
    "\1\0\1\12\2\0\1\12\6\0\4\12\1\0\7\12\1\0\3\12"+
    "\1\0\1\12\1\0\1\12\2\0\2\12\1\0\4\12\1\0\2\12"+
    "\11\0\1\12\2\0\5\12\1\0\1\12\11\0\12\13\2\0\4\12"+
    "\40\0\1\12\37\0\12\13\26\0\10\12\1\0\44\12\33\0\5\12"+
    "\163\0\53\12\24\0\1\12\12\13\6\0\6\12\4\0\4\12\3\0"+
    "\1\12\3\0\2\12\7\0\3\12\4\0\15\12\14\0\1\12\1\0"+
    "\12\13\6\0\46\12\1\0\1\12\5\0\1\12\2\0\53\12\1\0"+
    "\u014d\12\1\0\4\12\2\0\7\12\1\0\1\12\1\0\4\12\2\0"+
    "\51\12\1\0\4\12\2\0\41\12\1\0\4\12\2\0\7\12\1\0"+
    "\1\12\1\0\4\12\2\0\17\12\1\0\71\12\1\0\4\12\2\0"+
    "\103\12\45\0\20\12\20\0\125\12\14\0\u026c\12\2\0\21\12\1\0"+
    "\32\12\5\0\113\12\6\0\10\12\7\0\15\12\1\0\4\12\16\0"+
    "\22\12\16\0\22\12\16\0\15\12\1\0\3\12\17\0\64\12\43\0"+
    "\1\12\4\0\1\12\3\0\12\13\46\0\12\13\6\0\130\12\10\0"+
    "\51\12\1\0\1\12\5\0\106\12\12\0\37\12\47\0\12\13\36\12"+
    "\2\0\5\12\13\0\54\12\25\0\7\12\10\0\12\13\46\0\27\12"+
    "\11\0\65\12\53\0\12\13\6\0\12\13\15\0\1\12\135\0\57\12"+
    "\21\0\7\12\4\0\12\13\51\0\36\12\15\0\2\12\12\13\54\12"+
    "\32\0\44\12\34\0\12\13\3\0\3\12\12\13\44\12\153\0\4\12"+
    "\1\0\4\12\3\0\2\12\11\0\300\12\100\0\u0116\12\2\0\6\12"+
    "\2\0\46\12\2\0\6\12\2\0\10\12\1\0\1\12\1\0\1\12"+
    "\1\0\1\12\1\0\37\12\2\0\65\12\1\0\7\12\1\0\1\12"+
    "\3\0\3\12\1\0\7\12\3\0\4\12\2\0\6\12\4\0\15\12"+
    "\5\0\3\12\1\0\7\12\164\0\1\12\15\0\1\12\20\0\15\12"+
    "\145\0\1\12\4\0\1\12\2\0\12\12\1\0\1\12\3\0\5\12"+
    "\6\0\1\12\1\0\1\12\1\0\1\12\1\0\4\12\1\0\13\12"+
    "\2\0\4\12\5\0\5\12\4\0\1\12\64\0\2\12\u0a7b\0\57\12"+
    "\1\0\57\12\1\0\205\12\6\0\4\12\3\0\2\12\14\0\46\12"+
    "\1\0\1\12\5\0\1\12\2\0\70\12\7\0\1\12\20\0\27\12"+
    "\11\0\7\12\1\0\7\12\1\0\7\12\1\0\7\12\1\0\7\12"+
    "\1\0\7\12\1\0\7\12\1\0\7\12\120\0\1\12\u01d5\0\2\12"+
    "\52\0\5\12\5\0\2\12\4\0\126\12\6\0\3\12\1\0\132\12"+
    "\1\0\4\12\5\0\51\12\3\0\136\12\21\0\33\12\65\0\20\12"+
    "\u0200\0\u19b6\12\112\0\u51cd\12\63\0\u048d\12\103\0\56\12\2\0\u010d\12"+
    "\3\0\20\12\12\13\2\12\24\0\57\12\20\0\37\12\2\0\106\12"+
    "\61\0\11\12\2\0\147\12\2\0\4\12\1\0\36\12\2\0\2\12"+
    "\105\0\13\12\1\0\3\12\1\0\4\12\1\0\27\12\35\0\64\12"+
    "\16\0\62\12\34\0\12\13\30\0\6\12\3\0\1\12\4\0\12\13"+
    "\34\12\12\0\27\12\31\0\35\12\7\0\57\12\34\0\1\12\12\13"+
    "\6\0\5\12\1\0\12\12\12\13\5\12\1\0\51\12\27\0\3\12"+
    "\1\0\10\12\4\0\12\13\6\0\27\12\3\0\1\12\3\0\62\12"+
    "\1\0\1\12\3\0\2\12\2\0\5\12\2\0\1\12\1\0\1\12"+
    "\30\0\3\12\2\0\13\12\7\0\3\12\14\0\6\12\2\0\6\12"+
    "\2\0\6\12\11\0\7\12\1\0\7\12\1\0\53\12\1\0\4\12"+
    "\4\0\2\12\132\0\43\12\15\0\12\13\6\0\u2ba4\12\14\0\27\12"+
    "\4\0\61\12\u2104\0\u016e\12\2\0\152\12\46\0\7\12\14\0\5\12"+
    "\5\0\1\12\1\0\12\12\1\0\15\12\1\0\5\12\1\0\1\12"+
    "\1\0\2\12\1\0\2\12\1\0\154\12\41\0\u016b\12\22\0\100\12"+
    "\2\0\66\12\50\0\14\12\164\0\5\12\1\0\207\12\23\0\12\13"+
    "\7\0\32\12\6\0\32\12\13\0\131\12\3\0\6\12\2\0\6\12"+
    "\2\0\6\12\2\0\3\12\43\0\14\12\1\0\32\12\1\0\23\12"+
    "\1\0\2\12\1\0\17\12\2\0\16\12\42\0\173\12\u0185\0\35\12"+
    "\3\0\61\12\57\0\40\12\20\0\21\12\1\0\10\12\6\0\46\12"+
    "\12\0\36\12\2\0\44\12\4\0\10\12\60\0\236\12\2\0\12\13"+
    "\126\0\50\12\10\0\64\12\234\0\u0137\12\11\0\26\12\12\0\10\12"+
    "\230\0\6\12\2\0\1\12\1\0\54\12\1\0\2\12\3\0\1\12"+
    "\2\0\27\12\12\0\27\12\11\0\37\12\141\0\26\12\12\0\32\12"+
    "\106\0\70\12\6\0\2\12\100\0\1\12\17\0\4\12\1\0\3\12"+
    "\1\0\33\12\54\0\35\12\3\0\35\12\43\0\10\12\1\0\34\12"+
    "\33\0\66\12\12\0\26\12\12\0\23\12\15\0\22\12\156\0\111\12"+
    "\u03ba\0\65\12\56\0\12\13\23\0\55\12\40\0\31\12\7\0\12\13"+
    "\11\0\44\12\17\0\12\13\20\0\43\12\3\0\1\12\14\0\60\12"+
    "\16\0\4\12\13\0\12\13\1\12\45\0\22\12\1\0\31\12\204\0"+
    "\57\12\21\0\12\13\13\0\10\12\2\0\2\12\2\0\26\12\1\0"+
    "\7\12\1\0\2\12\1\0\5\12\3\0\1\12\37\0\5\12\u011e\0"+
    "\60\12\24\0\2\12\1\0\1\12\10\0\12\13\246\0\57\12\121\0"+
    "\60\12\24\0\1\12\13\0\12\13\46\0\53\12\25\0\12\13\u01d6\0"+
    "\100\12\12\13\25\0\1\12\u01c0\0\71\12\u0507\0\u0399\12\u0c67\0\u042f\12"+
    "\u33d1\0\u0239\12\7\0\37\12\1\0\12\13\146\0\36\12\22\0\60\12"+
    "\20\0\4\12\14\0\12\13\11\0\25\12\5\0\23\12\u0370\0\105\12"+
    "\13\0\1\12\102\0\15\12\u4060\0\2\12\u0bfe\0\153\12\5\0\15\12"+
    "\3\0\11\12\7\0\12\12\u1766\0\125\12\1\0\107\12\1\0\2\12"+
    "\2\0\1\12\2\0\2\12\2\0\4\12\1\0\14\12\1\0\1\12"+
    "\1\0\7\12\1\0\101\12\1\0\4\12\2\0\10\12\1\0\7\12"+
    "\1\0\34\12\1\0\4\12\1\0\5\12\1\0\1\12\3\0\7\12"+
    "\1\0\u0154\12\2\0\31\12\1\0\31\12\1\0\37\12\1\0\31\12"+
    "\1\0\37\12\1\0\31\12\1\0\37\12\1\0\31\12\1\0\37\12"+
    "\1\0\31\12\1\0\10\12\2\0\62\13\u1000\0\305\12\u053b\0\4\12"+
    "\1\0\33\12\1\0\2\12\1\0\1\12\2\0\1\12\1\0\12\12"+
    "\1\0\4\12\1\0\1\12\1\0\1\12\6\0\1\12\4\0\1\12"+
    "\1\0\1\12\1\0\1\12\1\0\3\12\1\0\2\12\1\0\1\12"+
    "\2\0\1\12\1\0\1\12\1\0\1\12\1\0\1\12\1\0\1\12"+
    "\1\0\2\12\1\0\1\12\2\0\4\12\1\0\7\12\1\0\4\12"+
    "\1\0\4\12\1\0\1\12\1\0\12\12\1\0\21\12\5\0\3\12"+
    "\1\0\5\12\1\0\21\12\u1144\0\ua6d7\12\51\0\u1035\12\13\0\336\12"+
    "\u3fe2\0\u021e\12\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05f0\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\2\3\1\4\1\0\1\5\1\6"+
    "\1\5\23\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\0\1\25\1\0\2\6\1\26\1\27\7\6\1\30"+
    "\1\31\1\6\1\32\5\6\1\33\13\6\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\4\6\1\43\1\44"+
    "\1\6\1\45\1\6\1\46\2\6\1\47\4\6\1\50"+
    "\5\6\1\51\5\6\1\52\2\6\1\53\1\6\1\54"+
    "\1\6\1\55\1\56\1\57\1\6\1\60\3\6\1\61"+
    "\4\6\1\62\1\63\1\64\1\6\1\65\1\6\1\66"+
    "\1\67\1\70\2\6\1\71\1\72\1\6\1\73\3\6"+
    "\1\74\1\75";

  private static int [] zzUnpackAction() {
    int [] result = new int[155];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\142\0\223\0\304\0\365\0\u0126"+
    "\0\u0157\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae"+
    "\0\u02df\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436"+
    "\0\u0467\0\u0498\0\u04c9\0\u04fa\0\u052b\0\u055c\0\u0157\0\u058d"+
    "\0\u0157\0\u0157\0\u0157\0\u0157\0\u0157\0\u05be\0\u05ef\0\u0620"+
    "\0\u0157\0\u0157\0\u0157\0\u0157\0\u0651\0\u0157\0\u0682\0\u06b3"+
    "\0\u06e4\0\u0188\0\u0188\0\u0715\0\u0746\0\u0777\0\u07a8\0\u07d9"+
    "\0\u080a\0\u083b\0\u0188\0\u0188\0\u086c\0\u0188\0\u089d\0\u08ce"+
    "\0\u08ff\0\u0930\0\u0961\0\u0188\0\u0992\0\u09c3\0\u09f4\0\u0a25"+
    "\0\u0a56\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b\0\u0b7c\0\u0157"+
    "\0\u0157\0\u0157\0\u0157\0\u0157\0\u0651\0\u0157\0\u0bad\0\u0bde"+
    "\0\u0c0f\0\u0c40\0\u0188\0\u0188\0\u0c71\0\u0188\0\u0ca2\0\u0188"+
    "\0\u0cd3\0\u0d04\0\u0188\0\u0d35\0\u0d66\0\u0d97\0\u0dc8\0\u0188"+
    "\0\u0df9\0\u0e2a\0\u0e5b\0\u0e8c\0\u0ebd\0\u0188\0\u0eee\0\u0f1f"+
    "\0\u0f50\0\u0f81\0\u0fb2\0\u0188\0\u0fe3\0\u1014\0\u0188\0\u1045"+
    "\0\u0188\0\u1076\0\u0188\0\u0188\0\u0188\0\u10a7\0\u0188\0\u10d8"+
    "\0\u1109\0\u113a\0\u0188\0\u116b\0\u119c\0\u11cd\0\u11fe\0\u0188"+
    "\0\u0188\0\u0188\0\u122f\0\u0188\0\u1260\0\u0188\0\u0188\0\u0188"+
    "\0\u1291\0\u12c2\0\u0188\0\u0188\0\u12f3\0\u0188\0\u1324\0\u1355"+
    "\0\u1386\0\u0188\0\u0188";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[155];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\0\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\0\1\13\1\11\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\12\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\12\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\2\2\1\11\56\2\5\0\1\5\1\6\61\0"+
    "\1\55\56\0\2\6\1\55\60\0\1\56\51\0\10\57"+
    "\2\0\2\57\1\0\44\57\66\0\2\12\3\0\2\12"+
    "\2\0\25\12\27\0\1\11\54\0\2\12\3\0\2\12"+
    "\2\0\1\12\1\60\23\12\23\0\2\12\3\0\2\12"+
    "\2\0\7\12\1\61\15\12\23\0\2\12\3\0\2\12"+
    "\2\0\1\12\1\62\15\12\1\63\5\12\23\0\2\12"+
    "\3\0\2\12\2\0\2\12\1\64\22\12\23\0\2\12"+
    "\3\0\2\12\2\0\1\12\1\65\7\12\1\66\13\12"+
    "\23\0\2\12\3\0\2\12\2\0\2\12\1\67\22\12"+
    "\23\0\2\12\3\0\2\12\2\0\7\12\1\70\15\12"+
    "\23\0\2\12\3\0\2\12\2\0\11\12\1\71\6\12"+
    "\1\72\4\12\23\0\2\12\3\0\2\12\2\0\11\12"+
    "\1\73\5\12\1\74\5\12\23\0\2\12\3\0\2\12"+
    "\2\0\2\12\1\75\22\12\23\0\2\12\3\0\2\12"+
    "\2\0\2\12\1\76\22\12\23\0\2\12\3\0\2\12"+
    "\2\0\2\12\1\77\1\12\1\100\20\12\23\0\2\12"+
    "\3\0\2\12\2\0\7\12\1\101\6\12\1\102\6\12"+
    "\23\0\2\12\3\0\2\12\2\0\1\12\1\103\1\104"+
    "\10\12\1\105\6\12\1\106\2\12\23\0\2\12\3\0"+
    "\2\12\2\0\2\12\1\107\1\12\1\110\3\12\1\111"+
    "\10\12\1\112\3\12\23\0\2\12\3\0\2\12\2\0"+
    "\4\12\1\113\20\12\23\0\2\12\3\0\2\12\2\0"+
    "\11\12\1\114\13\12\23\0\2\12\3\0\2\12\2\0"+
    "\4\12\1\115\20\12\23\0\2\12\3\0\2\12\2\0"+
    "\10\12\1\116\11\12\1\117\2\12\70\0\1\120\60\0"+
    "\1\121\60\0\1\122\1\0\1\123\56\0\1\124\13\0"+
    "\2\125\52\0\10\57\1\126\1\0\2\57\1\0\44\57"+
    "\5\0\2\12\3\0\2\12\2\0\2\12\1\127\22\12"+
    "\23\0\2\12\3\0\2\12\2\0\1\130\24\12\23\0"+
    "\2\12\3\0\2\12\2\0\16\12\1\131\6\12\23\0"+
    "\2\12\3\0\2\12\2\0\1\12\1\132\23\12\23\0"+
    "\2\12\3\0\2\12\2\0\12\12\1\133\12\12\23\0"+
    "\2\12\3\0\2\12\2\0\12\12\1\134\12\12\23\0"+
    "\2\12\3\0\2\12\2\0\3\12\1\135\21\12\23\0"+
    "\2\12\3\0\2\12\2\0\12\12\1\136\12\12\23\0"+
    "\2\12\3\0\2\12\2\0\15\12\1\137\7\12\23\0"+
    "\2\12\3\0\2\12\2\0\16\12\1\140\6\12\23\0"+
    "\2\12\3\0\2\12\2\0\11\12\1\141\13\12\23\0"+
    "\2\12\3\0\2\12\2\0\15\12\1\142\7\12\23\0"+
    "\2\12\3\0\2\12\2\0\16\12\1\143\6\12\23\0"+
    "\2\12\3\0\2\12\2\0\1\12\1\144\23\12\23\0"+
    "\2\12\3\0\2\12\2\0\21\12\1\145\3\12\23\0"+
    "\2\12\3\0\2\12\2\0\1\146\24\12\23\0\2\12"+
    "\3\0\2\12\2\0\7\12\1\147\15\12\23\0\2\12"+
    "\3\0\2\12\2\0\1\12\1\150\23\12\23\0\2\12"+
    "\3\0\2\12\2\0\20\12\1\151\4\12\23\0\2\12"+
    "\3\0\2\12\2\0\20\12\1\152\4\12\23\0\2\12"+
    "\3\0\2\12\2\0\11\12\1\153\13\12\23\0\2\12"+
    "\3\0\2\12\2\0\6\12\1\154\16\12\23\0\2\12"+
    "\3\0\2\12\2\0\16\12\1\155\6\12\23\0\2\12"+
    "\3\0\2\12\2\0\1\12\1\156\23\12\23\0\2\12"+
    "\3\0\2\12\2\0\16\12\1\157\6\12\23\0\2\12"+
    "\3\0\2\12\2\0\10\12\1\160\14\12\23\0\2\12"+
    "\3\0\2\12\2\0\3\12\1\161\10\12\1\162\10\12"+
    "\23\0\2\12\3\0\2\12\2\0\7\12\1\163\15\12"+
    "\23\0\2\12\3\0\2\12\2\0\2\12\1\164\22\12"+
    "\23\0\2\12\3\0\2\12\2\0\4\12\1\165\20\12"+
    "\23\0\2\12\3\0\2\12\2\0\10\12\1\166\14\12"+
    "\23\0\2\12\3\0\2\12\2\0\7\12\1\167\15\12"+
    "\23\0\2\12\3\0\2\12\2\0\15\12\1\170\7\12"+
    "\23\0\2\12\3\0\2\12\2\0\7\12\1\171\15\12"+
    "\23\0\2\12\3\0\2\12\2\0\10\12\1\172\14\12"+
    "\23\0\2\12\3\0\2\12\2\0\7\12\1\173\15\12"+
    "\23\0\2\12\3\0\2\12\2\0\7\12\1\174\15\12"+
    "\23\0\2\12\3\0\2\12\2\0\11\12\1\175\13\12"+
    "\23\0\2\12\3\0\2\12\2\0\15\12\1\176\7\12"+
    "\23\0\2\12\3\0\2\12\2\0\7\12\1\177\15\12"+
    "\23\0\2\12\3\0\2\12\2\0\14\12\1\200\10\12"+
    "\23\0\2\12\3\0\2\12\2\0\7\12\1\201\15\12"+
    "\23\0\2\12\3\0\2\12\2\0\10\12\1\202\14\12"+
    "\23\0\2\12\3\0\2\12\2\0\22\12\1\203\2\12"+
    "\23\0\2\12\3\0\2\12\2\0\20\12\1\204\4\12"+
    "\23\0\2\12\3\0\2\12\2\0\1\12\1\205\23\12"+
    "\23\0\2\12\3\0\2\12\2\0\7\12\1\206\15\12"+
    "\23\0\2\12\3\0\2\12\2\0\4\12\1\207\20\12"+
    "\23\0\2\12\3\0\2\12\2\0\13\12\1\210\11\12"+
    "\23\0\2\12\3\0\2\12\2\0\11\12\1\211\13\12"+
    "\23\0\2\12\3\0\2\12\2\0\16\12\1\212\6\12"+
    "\23\0\2\12\3\0\2\12\2\0\11\12\1\213\13\12"+
    "\23\0\2\12\3\0\2\12\2\0\7\12\1\214\15\12"+
    "\23\0\2\12\3\0\2\12\2\0\16\12\1\215\6\12"+
    "\23\0\2\12\3\0\2\12\2\0\20\12\1\216\4\12"+
    "\23\0\2\12\3\0\2\12\2\0\20\12\1\217\4\12"+
    "\23\0\2\12\3\0\2\12\2\0\7\12\1\220\15\12"+
    "\23\0\2\12\3\0\2\12\2\0\4\12\1\221\20\12"+
    "\23\0\2\12\3\0\2\12\2\0\12\12\1\222\12\12"+
    "\23\0\2\12\3\0\2\12\2\0\16\12\1\223\6\12"+
    "\23\0\2\12\3\0\2\12\2\0\3\12\1\224\21\12"+
    "\23\0\2\12\3\0\2\12\2\0\10\12\1\225\14\12"+
    "\23\0\2\12\3\0\2\12\2\0\5\12\1\226\17\12"+
    "\23\0\2\12\3\0\2\12\2\0\21\12\1\227\3\12"+
    "\23\0\2\12\3\0\2\12\2\0\2\12\1\230\22\12"+
    "\23\0\2\12\3\0\2\12\2\0\1\12\1\231\23\12"+
    "\23\0\2\12\3\0\2\12\2\0\11\12\1\232\13\12"+
    "\23\0\2\12\3\0\2\12\2\0\7\12\1\233\15\12"+
    "\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5047];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\5\1\1\0\1\11\25\1\1\11\1\1\5\11"+
    "\3\1\4\11\1\0\1\11\1\0\40\1\5\11\1\1"+
    "\1\11\105\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[155];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

   StringBuffer string = new StringBuffer();

private Symbol symbol(int type) {
	return new PascalSymbol(type, yyline+1, yycolumn+1);
 }

private Symbol symbol(int type, Object value) {
	return new PascalSymbol(type, yyline+1, yycolumn+1, value);
 }
  


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2454) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return symbol(sym.PLUS);
            }
          case 62: break;
          case 2: 
            { return symbol(sym.MINUS);
            }
          case 63: break;
          case 3: 
            { return symbol(sym.INTEGER_NUMBER, new Integer(yytext()));
            }
          case 64: break;
          case 4: 
            { return symbol(sym.DOT);
            }
          case 65: break;
          case 5: 
            { /*Ignore*/
            }
          case 66: break;
          case 6: 
            { return symbol(sym.IDENTIFIER, yytext());
            }
          case 67: break;
          case 7: 
            { return symbol(sym.SEMICOLON);
            }
          case 68: break;
          case 8: 
            { return symbol(sym.COLON);
            }
          case 69: break;
          case 9: 
            { return symbol(sym.LPAREN);
            }
          case 70: break;
          case 10: 
            { return symbol(sym.RPAREN);
            }
          case 71: break;
          case 11: 
            { return symbol(sym.COMMA);
            }
          case 72: break;
          case 12: 
            { return symbol(sym.LBRACK);
            }
          case 73: break;
          case 13: 
            { return symbol(sym.RBRACK);
            }
          case 74: break;
          case 14: 
            { return symbol(sym.EQ);
            }
          case 75: break;
          case 15: 
            { return symbol(sym.LT);
            }
          case 76: break;
          case 16: 
            { return symbol(sym.GT);
            }
          case 77: break;
          case 17: 
            { return symbol(sym.MULT);
            }
          case 78: break;
          case 18: 
            { return symbol(sym.DIV);
            }
          case 79: break;
          case 19: 
            { return symbol(sym.TIL);
            }
          case 80: break;
          case 20: 
            { return symbol(sym.FUNC);
            }
          case 81: break;
          case 21: 
            { return symbol(sym.DOT_DOT);
            }
          case 82: break;
          case 22: 
            { return symbol(sym.OR);
            }
          case 83: break;
          case 23: 
            { return symbol(sym.OF);
            }
          case 84: break;
          case 24: 
            { return symbol(sym.IN);
            }
          case 85: break;
          case 25: 
            { return symbol(sym.IF);
            }
          case 86: break;
          case 26: 
            { return symbol(sym.DO);
            }
          case 87: break;
          case 27: 
            { return symbol(sym.TO);
            }
          case 88: break;
          case 28: 
            { return symbol(sym.ASSIGNMENT);
            }
          case 89: break;
          case 29: 
            { return symbol(sym.EQEQ);
            }
          case 90: break;
          case 30: 
            { return symbol(sym.LTEQ);
            }
          case 91: break;
          case 31: 
            { return symbol(sym.DIF);
            }
          case 92: break;
          case 32: 
            { return symbol(sym.GTEQ);
            }
          case 93: break;
          case 33: 
            { return symbol(sym.REAL_NUMBER, new Float(yytext()));
            }
          case 94: break;
          case 34: 
            { return symbol(sym.STRING,new String(yytext()));
            }
          case 95: break;
          case 35: 
            { return symbol(sym.AND);
            }
          case 96: break;
          case 36: 
            { return symbol(sym.MOD);
            }
          case 97: break;
          case 37: 
            { return symbol(sym.END);
            }
          case 98: break;
          case 38: 
            { return symbol(sym.NOT);
            }
          case 99: break;
          case 39: 
            { return symbol(sym.SET);
            }
          case 100: break;
          case 40: 
            { return symbol(sym.FOR);
            }
          case 101: break;
          case 41: 
            { return symbol(sym.VAR);
            }
          case 102: break;
          case 42: 
            { return symbol(sym.GOTO);
            }
          case 103: break;
          case 43: 
            { return symbol(sym.ELSE);
            }
          case 104: break;
          case 44: 
            { return symbol(sym.CASE);
            }
          case 105: break;
          case 45: 
            { return symbol(sym.BOOLEAN_LITERAL, new Boolean(true));
            }
          case 106: break;
          case 46: 
            { return symbol(sym.TYPE);
            }
          case 107: break;
          case 47: 
            { return symbol(sym.THEN);
            }
          case 108: break;
          case 48: 
            { return symbol(sym.FILE);
            }
          case 109: break;
          case 49: 
            { return symbol(sym.WITH);
            }
          case 110: break;
          case 50: 
            { return symbol(sym.ARRAY);
            }
          case 111: break;
          case 51: 
            { return symbol(sym.BEGIN);
            }
          case 112: break;
          case 52: 
            { return symbol(sym.CONST);
            }
          case 113: break;
          case 53: 
            { return symbol(sym.BOOLEAN_LITERAL, new Boolean(false));
            }
          case 114: break;
          case 54: 
            { return symbol(sym.LABEL);
            }
          case 115: break;
          case 55: 
            { return symbol(sym.UNTIL);
            }
          case 116: break;
          case 56: 
            { return symbol(sym.WHILE);
            }
          case 117: break;
          case 57: 
            { return symbol(sym.REPEAT);
            }
          case 118: break;
          case 58: 
            { return symbol(sym.STRINGTERMINAL);
            }
          case 119: break;
          case 59: 
            { return symbol(sym.PROGRAM);
            }
          case 120: break;
          case 60: 
            { return symbol(sym.FUNCTION);
            }
          case 121: break;
          case 61: 
            { return symbol(sym.PROCEDURE);
            }
          case 122: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
