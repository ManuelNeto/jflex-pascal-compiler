
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

package generated;

import compiler.util.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\062\000\002\002\004\000\002\002\005\000\002\003" +
    "\005\000\002\004\004\000\002\043\002\000\002\044\002" +
    "\000\002\005\007\000\002\013\003\000\002\013\002\000" +
    "\002\014\006\000\002\015\002\000\002\015\005\000\002" +
    "\017\005\000\002\020\003\000\002\020\003\000\002\041" +
    "\003\000\002\007\003\000\002\007\002\000\002\010\006" +
    "\000\002\011\005\000\002\011\002\000\002\012\005\000" +
    "\002\040\005\000\002\040\005\000\002\006\004\000\002" +
    "\022\002\000\002\022\004\000\002\021\002\000\002\021" +
    "\003\000\002\023\007\000\002\024\002\000\002\024\003" +
    "\000\002\025\005\000\002\026\012\000\002\031\002\000" +
    "\002\031\003\000\002\032\004\000\002\033\002\000\002" +
    "\033\005\000\002\037\003\000\002\034\005\000\002\035" +
    "\003\000\002\036\003\000\002\027\006\000\002\030\003" +
    "\000\002\042\005\000\002\042\005\000\002\042\005\000" +
    "\002\042\005\000\002\042\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\136\000\004\004\006\001\002\000\004\002\140\001" +
    "\002\000\012\005\ufff9\007\ufff9\011\011\052\ufff9\001\002" +
    "\000\004\025\007\001\002\000\004\031\010\001\002\000" +
    "\012\005\uffff\007\uffff\011\uffff\052\uffff\001\002\000\004" +
    "\025\130\001\002\000\004\007\057\001\002\000\010\005" +
    "\ufffa\007\ufffa\052\ufffa\001\002\000\004\032\125\001\002" +
    "\000\010\005\ufffd\007\ufffd\052\ufffd\001\002\000\010\005" +
    "\ufff0\007\ufff0\052\017\001\002\000\004\025\114\001\002" +
    "\000\006\005\ufffc\007\ufffc\001\002\000\006\005\ufff1\007" +
    "\ufff1\001\002\000\006\005\025\007\uffe3\001\002\000\004" +
    "\031\052\001\002\000\004\007\uffe2\001\002\000\004\025" +
    "\027\001\002\000\004\007\ufffb\001\002\000\004\034\030" +
    "\001\002\000\006\025\033\035\uffdf\001\002\000\004\035" +
    "\045\001\002\000\006\031\041\035\uffdc\001\002\000\004" +
    "\033\035\001\002\000\004\035\uffde\001\002\000\004\025" +
    "\040\001\002\000\006\031\uffd8\035\uffd8\001\002\000\006" +
    "\031\uffd9\035\uffd9\001\002\000\006\031\uffda\035\uffda\001" +
    "\002\000\004\025\033\001\002\000\004\035\uffdd\001\002" +
    "\000\006\031\041\035\uffdc\001\002\000\004\035\uffdb\001" +
    "\002\000\004\033\046\001\002\000\004\025\040\001\002" +
    "\000\004\031\uffd7\001\002\000\004\031\051\001\002\000" +
    "\004\031\uffe0\001\002\000\006\007\ufff0\052\017\001\002" +
    "\000\004\007\055\001\002\000\004\007\uffe1\001\002\000" +
    "\004\007\057\001\002\000\004\010\113\001\002\000\010" +
    "\010\uffe6\025\062\030\064\001\002\000\004\010\uffd5\001" +
    "\002\000\006\010\uffe8\025\062\001\002\000\004\036\101" +
    "\001\002\000\014\010\074\046\071\047\072\050\070\051" +
    "\073\001\002\000\014\010\uffd0\046\uffd0\047\uffd0\050\uffd0" +
    "\051\uffd0\001\002\000\006\010\uffe5\025\uffe5\001\002\000" +
    "\004\010\067\001\002\000\006\010\uffeb\032\uffeb\001\002" +
    "\000\004\030\064\001\002\000\004\030\064\001\002\000" +
    "\004\030\064\001\002\000\004\030\064\001\002\000\006" +
    "\010\uffea\032\uffea\001\002\000\014\010\uffd1\046\071\047" +
    "\072\050\070\051\073\001\002\000\014\010\uffd3\046\071" +
    "\047\072\050\070\051\073\001\002\000\014\010\uffd4\046" +
    "\071\047\072\050\070\051\073\001\002\000\014\010\uffd2" +
    "\046\071\047\072\050\070\051\073\001\002\000\004\045" +
    "\102\001\002\000\006\026\103\030\106\001\002\000\004" +
    "\031\ufff3\001\002\000\004\031\107\001\002\000\004\031" +
    "\ufff4\001\002\000\004\031\ufff2\001\002\000\006\010\uffe4" +
    "\025\uffe4\001\002\000\004\010\uffe9\001\002\000\006\010" +
    "\uffe8\025\062\001\002\000\004\010\uffe7\001\002\000\004" +
    "\007\uffd6\001\002\000\004\033\123\001\002\000\004\031" +
    "\116\001\002\000\010\005\uffed\007\uffed\025\114\001\002" +
    "\000\006\005\uffef\007\uffef\001\002\000\004\031\121\001" +
    "\002\000\010\005\uffed\007\uffed\025\114\001\002\000\006" +
    "\005\uffee\007\uffee\001\002\000\004\025\124\001\002\000" +
    "\004\031\uffec\001\002\000\004\002\000\001\002\000\004" +
    "\032\ufffe\001\002\000\004\031\133\001\002\000\004\045" +
    "\131\001\002\000\006\026\103\030\106\001\002\000\004" +
    "\031\ufff5\001\002\000\012\005\ufff7\007\ufff7\025\130\052" +
    "\ufff7\001\002\000\004\031\136\001\002\000\010\005\ufff8" +
    "\007\ufff8\052\ufff8\001\002\000\012\005\ufff7\007\ufff7\025" +
    "\130\052\ufff7\001\002\000\010\005\ufff6\007\ufff6\052\ufff6" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\136\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\012\004\013\005\011\013\014\014\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\126\001\001\000\004\040\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\043\015\001\001\000" +
    "\006\007\017\010\020\001\001\000\004\012\114\001\001" +
    "\000\004\044\021\001\001\000\002\001\001\000\010\024" +
    "\025\025\023\026\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\031\030\032\033\034\031\001\001\000\002" +
    "\001\001\000\004\033\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\035\036\037\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\034" +
    "\042\001\001\000\002\001\001\000\004\033\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\036\047\037" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\007\052\010\020\027\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\030\055\040\057" +
    "\001\001\000\002\001\001\000\012\006\065\021\060\023" +
    "\064\042\062\001\001\000\002\001\001\000\006\022\107" +
    "\023\110\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\042\077\001\001\000\004\042\076\001" +
    "\001\000\004\042\075\001\001\000\004\042\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\020\103\041\104\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\022\111\023\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\116\012\117\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\121\012\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\020\131\041\104\001\001\000\002\001" +
    "\001\000\006\015\134\017\133\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\136\017\133\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




 public void report_error(String message, Object info){
   StringBuffer m = new StringBuffer("Error: " + message + "\n");
   System.err.print(m);
 }

 public void report_fatal_error(String message, Object info) {
   report_error(message, info);
   throw new RuntimeException("Fatal Syntax Error");
 }
 
 public void syntax_error(Symbol s){
    System.out.println("compiler has detected a syntax error at line " + s.left 
        + " column " + s.right + "\n");
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= program_header block DOT 
            {
              Object RESULT =null;
		 Logger.print("Program definition"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program_header ::= PROGRAM IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;
		 System.out.println("Program header definition"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_header",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // block ::= declaration_part statement_part 
            {
              Object RESULT =null;
		 Logger.print("Block definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$0 ::= 
            {
              Object RESULT =null;
 Logger.print("Constant part definition"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
 Logger.print("Variable Declaration part definition"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration_part ::= const_definition_part_opt NT$0 variable_declaration_part_opt NT$1 function_declaration_part_opt 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Logger.print("Function declaration part definition"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_part",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // const_definition_part_opt ::= const_definition_part 
            {
              Object RESULT =null;
		 Logger.print("Constant definition part optional definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_definition_part_opt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // const_definition_part_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_definition_part_opt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // const_definition_part ::= CONST const SEMICOLON const_part_ext 
            {
              Object RESULT =null;
		 Logger.print("Constant definition part optional definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_definition_part",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // const_part_ext ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_part_ext",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // const_part_ext ::= const SEMICOLON const_part_ext 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_part_ext",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // const ::= IDENTIFIER EQ constant 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // constant ::= number 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // constant ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // number ::= INTEGER_NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // variable_declaration_part_opt ::= variable_declaration_part 
            {
              Object RESULT =null;
		 Logger.print("Variable declaration part optional definition"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_part_opt",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // variable_declaration_part_opt ::= 
            {
              Object RESULT =null;
		Logger.print("VAZIO");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_part_opt",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // variable_declaration_part ::= VAR variable_declaration SEMICOLON variable_declaration_part_ext 
            {
              Object RESULT =null;
		 Logger.print("Variable declaration part definition"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_part",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // variable_declaration_part_ext ::= variable_declaration SEMICOLON variable_declaration_part_ext 
            {
              Object RESULT =null;
		 Logger.print("Variable declaration part ext definition"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_part_ext",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // variable_declaration_part_ext ::= 
            {
              Object RESULT =null;
		Logger.print("VAZIO");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_part_ext",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // variable_declaration ::= IDENTIFIER COLON IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement_part ::= BEGIN statement_code END 
            {
              Object RESULT =null;
		 Logger.print("Statement Part"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_part",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement_part ::= BEGIN expr END 
            {
              Object RESULT =null;
		 Logger.print("Statement Part"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_part",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement_code ::= atribute_part_opt atribute_part_ext 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_code",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // atribute_part_ext ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atribute_part_ext",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // atribute_part_ext ::= atribute_part atribute_part_ext 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atribute_part_ext",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // atribute_part_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atribute_part_opt",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // atribute_part_opt ::= atribute_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atribute_part_opt",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // atribute_part ::= IDENTIFIER COMMA EQ constant SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atribute_part",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // function_declaration_part_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration_part_opt",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // function_declaration_part_opt ::= function_dcl 
            {
              Object RESULT =null;
		 Logger.print("Function Optional declaration"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration_part_opt",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // function_dcl ::= function_heading SEMICOLON function_body 
            {
              Object RESULT =null;
		 Logger.print("Function definition"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_dcl",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // function_heading ::= FUNCTION IDENTIFIER LPAREN parameter_list_opt RPAREN COLON result_type SEMICOLON 
            {
              Object RESULT =null;
		 Logger.print("Function heading definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_heading",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // parameter_list_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list_opt",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // parameter_list_opt ::= parameter_list 
            {
              Object RESULT =null;
		 Logger.print("Parameter list optional definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list_opt",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // parameter_list ::= parameter_section parameter_section_ext 
            {
              Object RESULT =null;
		 Logger.print("Parameter list definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // parameter_section_ext ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_section_ext",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // parameter_section_ext ::= SEMICOLON parameter_section parameter_section_ext 
            {
              Object RESULT =null;
		 Logger.print("Parameter section extended definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_section_ext",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // type_identifier ::= IDENTIFIER 
            {
              Object RESULT =null;
		 Logger.print("Type identifier definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_identifier",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parameter_section ::= IDENTIFIER COLON parameter_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_section",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parameter_type ::= type_identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_type",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // result_type ::= type_identifier 
            {
              Object RESULT =null;
		 Logger.print("Result type definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("result_type",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // function_body ::= variable_declaration_part_opt BEGIN function_statement END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_body",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // function_statement ::= statement_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_statement",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= expr PLUS expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= expr MINUS expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= expr MULT expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= expr DIV expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= INTEGER_NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
