
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

package generated;

import compiler.util.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\137\000\002\002\004\000\002\002\005\000\002\003" +
    "\005\000\002\067\002\000\002\004\005\000\002\005\002" +
    "\000\002\005\002\000\002\005\004\000\002\005\004\000" +
    "\002\005\004\000\002\005\004\000\002\014\002\000\002" +
    "\014\003\000\002\015\006\000\002\016\002\000\002\016" +
    "\005\000\002\020\005\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\064\003\000\002\007\003\000" +
    "\002\007\002\000\002\010\006\000\002\010\004\000\002" +
    "\011\002\000\002\011\005\000\002\012\006\000\002\013" +
    "\002\000\002\013\005\000\002\063\005\000\002\063\005" +
    "\000\002\041\002\000\002\041\004\000\002\042\002\000" +
    "\002\042\005\000\002\006\002\000\002\070\002\000\002" +
    "\071\002\000\002\072\002\000\002\006\012\000\002\052" +
    "\002\000\002\052\004\000\002\053\002\000\002\053\004" +
    "\000\002\054\006\000\002\054\007\000\002\037\002\000" +
    "\002\037\002\000\002\037\003\000\002\037\003\000\002" +
    "\040\002\000\002\040\007\000\002\055\002\000\002\055" +
    "\003\000\002\056\004\000\002\057\002\000\002\057\004" +
    "\000\002\062\012\000\002\062\013\000\002\062\006\000" +
    "\002\060\005\000\002\060\005\000\002\060\005\000\002" +
    "\060\005\000\002\060\005\000\002\060\005\000\002\060" +
    "\005\000\002\061\003\000\002\032\007\000\002\025\002" +
    "\000\002\025\003\000\002\026\004\000\002\027\012\000" +
    "\002\043\002\000\002\043\003\000\002\044\004\000\002" +
    "\045\002\000\002\045\005\000\002\051\003\000\002\046" +
    "\005\000\002\047\003\000\002\050\003\000\002\030\005" +
    "\000\002\031\003\000\002\033\002\000\002\033\003\000" +
    "\002\034\004\000\002\035\015\000\002\036\005\000\002" +
    "\065\005\000\002\065\005\000\002\065\005\000\002\065" +
    "\005\000\002\065\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\267\000\004\004\006\001\002\000\004\002\271\001" +
    "\002\000\014\005\025\006\020\007\ufffc\011\030\052\022" +
    "\001\002\000\004\025\007\001\002\000\004\031\010\001" +
    "\002\000\014\005\uffff\006\uffff\007\uffff\011\uffff\052\uffff" +
    "\001\002\000\014\005\uffba\006\uffba\007\uffba\011\uffba\052" +
    "\uffba\001\002\000\014\005\025\006\020\007\ufffc\011\030" +
    "\052\022\001\002\000\004\007\ufffe\001\002\000\006\007" +
    "\uffeb\052\022\001\002\000\014\005\uffab\006\uffab\007\uffab" +
    "\011\uffab\052\uffab\001\002\000\014\005\025\006\020\007" +
    "\ufffc\011\030\052\022\001\002\000\004\032\242\001\002" +
    "\000\004\025\230\001\002\000\006\007\uffeb\052\022\001" +
    "\002\000\004\025\073\001\002\000\014\005\025\006\020" +
    "\007\ufffc\011\030\052\022\001\002\000\014\005\025\006" +
    "\020\007\ufffc\011\030\052\022\001\002\000\004\025\046" +
    "\001\002\000\014\005\ufff5\006\ufff5\007\ufff5\011\ufff5\052" +
    "\ufff5\001\002\000\014\005\uffec\006\uffec\007\uffec\011\uffec" +
    "\052\uffec\001\002\000\004\025\032\001\002\000\004\031" +
    "\041\001\002\000\004\045\033\001\002\000\010\025\037" +
    "\026\034\030\040\001\002\000\016\010\uffee\017\uffee\021" +
    "\uffee\025\uffee\031\uffee\035\uffee\001\002\000\004\031\ufff1" +
    "\001\002\000\016\010\ufff0\017\ufff0\021\ufff0\025\ufff0\031" +
    "\ufff0\035\ufff0\001\002\000\006\031\uffef\035\uffef\001\002" +
    "\000\016\010\uffed\017\uffed\021\uffed\025\uffed\031\uffed\035" +
    "\uffed\001\002\000\016\005\ufff3\006\ufff3\007\ufff3\011\ufff3" +
    "\025\032\052\ufff3\001\002\000\014\005\ufff4\006\ufff4\007" +
    "\ufff4\011\ufff4\052\ufff4\001\002\000\004\031\044\001\002" +
    "\000\016\005\ufff3\006\ufff3\007\ufff3\011\ufff3\025\032\052" +
    "\ufff3\001\002\000\014\005\ufff2\006\ufff2\007\ufff2\011\ufff2" +
    "\052\ufff2\001\002\000\004\034\047\001\002\000\006\025" +
    "\052\035\uffb7\001\002\000\004\035\064\001\002\000\006" +
    "\031\060\035\uffb4\001\002\000\004\033\054\001\002\000" +
    "\006\031\uffb6\035\uffb6\001\002\000\004\025\057\001\002" +
    "\000\006\031\uffb0\035\uffb0\001\002\000\006\031\uffb1\035" +
    "\uffb1\001\002\000\006\031\uffb2\035\uffb2\001\002\000\004" +
    "\025\052\001\002\000\006\031\uffb5\035\uffb5\001\002\000" +
    "\006\031\060\035\uffb4\001\002\000\006\031\uffb3\035\uffb3" +
    "\001\002\000\004\033\065\001\002\000\004\025\057\001" +
    "\002\000\004\031\uffaf\001\002\000\004\031\070\001\002" +
    "\000\006\007\uffb8\052\uffb8\001\002\000\004\007\ufff7\001" +
    "\002\000\004\007\ufffa\001\002\000\006\033\uffe5\036\102" +
    "\001\002\000\016\005\uffe9\006\uffe9\007\uffe9\011\uffe9\031" +
    "\075\052\uffe9\001\002\000\016\005\uffe8\006\uffe8\007\uffe8" +
    "\011\uffe8\025\073\052\uffe8\001\002\000\014\005\uffea\006" +
    "\uffea\007\uffea\011\uffea\052\uffea\001\002\000\004\031\100" +
    "\001\002\000\016\005\uffe8\006\uffe8\007\uffe8\011\uffe8\025" +
    "\073\052\uffe8\001\002\000\014\005\uffe7\006\uffe7\007\uffe7" +
    "\011\uffe7\052\uffe7\001\002\000\004\025\106\001\002\000" +
    "\004\033\104\001\002\000\004\025\105\001\002\000\016" +
    "\005\uffe6\006\uffe6\007\uffe6\011\uffe6\031\uffe6\052\uffe6\001" +
    "\002\000\006\033\uffe5\036\102\001\002\000\004\033\uffe4" +
    "\001\002\000\004\007\112\001\002\000\014\005\uffaa\006" +
    "\uffaa\007\uffaa\011\uffaa\052\uffaa\001\002\000\022\005\uffdd" +
    "\006\uffdd\007\uffdd\011\uffdd\017\uffd8\021\uffd8\025\116\052" +
    "\uffdd\001\002\000\014\005\uffa8\006\uffa8\007\uffa8\011\uffa8" +
    "\052\uffa8\001\002\000\010\017\uffdc\021\uffdc\025\uffdc\001" +
    "\002\000\012\010\uffd6\017\uffd6\021\uffd6\025\116\001\002" +
    "\000\004\033\120\001\002\000\014\005\uffad\006\uffad\007" +
    "\uffad\011\uffad\052\uffad\001\002\000\004\045\121\001\002" +
    "\000\016\010\uffd2\017\uffd2\021\uffd2\025\123\026\034\030" +
    "\040\001\002\000\014\010\uffd0\017\uffd0\021\uffd0\025\uffd0" +
    "\031\137\001\002\000\016\010\uffef\017\uffef\021\uffef\025" +
    "\uffef\031\uffef\034\126\001\002\000\012\010\uffcf\017\uffcf" +
    "\021\uffcf\025\uffcf\001\002\000\012\010\uffd4\017\uffd4\021" +
    "\uffd4\025\uffd4\001\002\000\006\025\127\035\uffe1\001\002" +
    "\000\006\035\uffdf\036\134\001\002\000\004\035\131\001" +
    "\002\000\004\031\132\001\002\000\012\010\uffcd\017\uffcd" +
    "\021\uffcd\025\uffcd\001\002\000\004\035\uffe0\001\002\000" +
    "\004\025\135\001\002\000\006\035\uffdf\036\134\001\002" +
    "\000\004\035\uffde\001\002\000\012\010\uffd3\017\uffd3\021" +
    "\uffd3\025\uffd3\001\002\000\012\010\uffd7\017\uffd7\021\uffd7" +
    "\025\uffd7\001\002\000\012\010\uffd6\017\uffd6\021\uffd6\025" +
    "\116\001\002\000\012\010\uffd5\017\uffd5\021\uffd5\025\uffd5" +
    "\001\002\000\010\017\147\021\144\025\uffcc\001\002\000" +
    "\006\007\215\017\216\001\002\000\004\025\uffdb\001\002" +
    "\000\004\025\uffcb\001\002\000\004\034\154\001\002\000" +
    "\010\017\147\021\144\025\uffc9\001\002\000\004\025\uffca" +
    "\001\002\000\010\017\147\021\144\025\uffc9\001\002\000" +
    "\004\025\uffc8\001\002\000\004\025\156\001\002\000\004" +
    "\035\175\001\002\000\020\037\165\040\160\041\163\042" +
    "\164\043\161\044\162\045\157\001\002\000\004\025\174" +
    "\001\002\000\004\025\173\001\002\000\004\025\172\001" +
    "\002\000\004\025\171\001\002\000\004\025\170\001\002" +
    "\000\004\025\167\001\002\000\004\025\166\001\002\000" +
    "\004\035\uffbe\001\002\000\004\035\uffc1\001\002\000\004" +
    "\035\uffc0\001\002\000\004\035\uffc3\001\002\000\004\035" +
    "\uffc4\001\002\000\004\035\uffbf\001\002\000\004\035\uffc2" +
    "\001\002\000\004\020\176\001\002\000\004\007\177\001" +
    "\002\000\006\010\uffd8\025\116\001\002\000\004\010\uffbd" +
    "\001\002\000\004\010\202\001\002\000\010\017\uffc7\021" +
    "\uffc7\025\uffc7\001\002\000\004\025\205\001\002\000\004" +
    "\010\uffda\001\002\000\004\033\206\001\002\000\004\045" +
    "\207\001\002\000\004\025\210\001\002\000\004\031\211" +
    "\001\002\000\004\010\uffbc\001\002\000\004\010\213\001" +
    "\002\000\004\031\214\001\002\000\014\005\uffd9\006\uffd9" +
    "\007\uffd9\011\uffd9\052\uffd9\001\002\000\006\010\uffd8\025" +
    "\116\001\002\000\004\034\217\001\002\000\004\025\156" +
    "\001\002\000\004\035\221\001\002\000\004\020\222\001" +
    "\002\000\004\007\223\001\002\000\006\010\uffd8\025\116" +
    "\001\002\000\004\010\225\001\002\000\010\017\uffc6\021" +
    "\uffc6\025\uffc6\001\002\000\004\010\227\001\002\000\010" +
    "\017\uffc5\021\uffc5\025\uffc5\001\002\000\004\034\231\001" +
    "\002\000\006\025\052\031\uffb7\001\002\000\004\031\233" +
    "\001\002\000\004\052\234\001\002\000\004\025\235\001" +
    "\002\000\004\033\236\001\002\000\010\025\037\026\034" +
    "\030\040\001\002\000\004\035\240\001\002\000\004\031" +
    "\241\001\002\000\006\007\uffa9\052\uffa9\001\002\000\004" +
    "\002\000\001\002\000\004\007\ufff9\001\002\000\004\007" +
    "\246\001\002\000\014\005\uffb9\006\uffb9\007\uffb9\011\uffb9" +
    "\052\uffb9\001\002\000\022\005\uffdd\006\uffdd\007\uffdd\011" +
    "\uffdd\017\uffd8\021\uffd8\025\116\052\uffdd\001\002\000\014" +
    "\005\uffae\006\uffae\007\uffae\011\uffae\052\uffae\001\002\000" +
    "\004\007\251\001\002\000\010\010\uffd8\025\116\030\255" +
    "\001\002\000\004\032\ufffd\001\002\000\004\010\267\001" +
    "\002\000\014\010\262\046\257\047\260\050\256\051\261" +
    "\001\002\000\014\010\uffa3\046\uffa3\047\uffa3\050\uffa3\051" +
    "\uffa3\001\002\000\004\030\255\001\002\000\004\030\255" +
    "\001\002\000\004\030\255\001\002\000\004\030\255\001" +
    "\002\000\004\032\uffe3\001\002\000\014\010\uffa4\046\257" +
    "\047\260\050\256\051\261\001\002\000\014\010\uffa6\046" +
    "\257\047\260\050\256\051\261\001\002\000\014\010\uffa7" +
    "\046\257\047\260\050\256\051\261\001\002\000\014\010" +
    "\uffa5\046\257\047\260\050\256\051\261\001\002\000\004" +
    "\032\uffe2\001\002\000\004\007\ufff8\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\267\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\032\004\016\005\012\007\015\010\026\014\022" +
    "\015\025\025\011\026\010\027\013\033\023\034\014\035" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\005\267\007\015\010" +
    "\026\014\022\015\025\025\011\026\010\027\013\033\023" +
    "\034\014\035\020\001\001\000\004\067\247\001\001\000" +
    "\010\007\243\010\026\030\244\001\001\000\002\001\001" +
    "\000\030\005\242\007\015\010\026\014\022\015\025\025" +
    "\011\026\010\027\013\033\023\034\014\035\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\007\107\010" +
    "\026\036\110\001\001\000\004\012\073\001\001\000\030" +
    "\005\071\007\015\010\026\014\022\015\025\025\011\026" +
    "\010\027\013\033\023\034\014\035\020\001\001\000\030" +
    "\005\070\007\015\010\026\014\022\015\025\025\011\026" +
    "\010\027\013\033\023\034\014\035\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\021\034\064\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\041\020\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\016\044\020\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\043\047\044\052\046" +
    "\050\001\001\000\002\001\001\000\004\045\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\047\055\051" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\046\061\001\001\000\002\001\001\000" +
    "\004\045\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\050\066\051\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\102\001\001\000\002\001\001\000" +
    "\006\011\075\012\076\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\100\012\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\006\116" +
    "\031\112\052\113\054\114\001\001\000\002\001\001\000" +
    "\004\070\142\001\001\000\006\053\137\054\140\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\021\121\037\124\040\123\064\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\041\127\001\001\000\004\042\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\042\135\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\053\141\054\140\001\001\000\002\001\001\000\010" +
    "\055\144\056\145\062\147\001\001\000\002\001\001\000" +
    "\004\071\202\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\057\150\062\151\001\001\000\002\001\001\000" +
    "\006\057\152\062\151\001\001\000\002\001\001\000\004" +
    "\060\154\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\052\177\054\114\061\200\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\203\001\001" +
    "\000\004\072\211\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\052\177\054\114\061\225\001\001\000\002\001\001" +
    "\000\004\060\217\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\052\177\054\114\061\223" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\043\231" +
    "\044\052\046\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\021\236" +
    "\064\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\006\116\031\246\052" +
    "\113\054\114\001\001\000\002\001\001\000\004\063\251" +
    "\001\001\000\010\052\252\054\114\065\253\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\065\265\001\001\000\004\065\264\001" +
    "\001\000\004\065\263\001\001\000\004\065\262\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




 public void report_error(String message, Object info){
   StringBuffer m = new StringBuffer("Error: " + message + "\n");
   System.err.print(m);
 }

 public void report_fatal_error(String message, Object info) {
   report_error(message, info);
   throw new RuntimeException("Fatal Syntax Error");
 }
 
 public void syntax_error(Symbol s){
    System.out.println("compiler has detected a syntax error at line " + s.left 
        + " column " + s.right + "\n");
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= program_header block DOT 
            {
              Object RESULT =null;
		 Logger.print("Program definition"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program_header ::= PROGRAM IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;
		 System.out.println("Program header definition"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_header",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              Object RESULT =null;
 Logger.print("Declaration part");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // block ::= declaration_part NT$0 statement_part 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Logger.print("Statement part");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration_part ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_part",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration_part ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_part",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaration_part ::= const_definition_part_opt declaration_part 
            {
              Object RESULT =null;
		 Logger.print("Constant part definition"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_part",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaration_part ::= variable_declaration_part_opt declaration_part 
            {
              Object RESULT =null;
		 Logger.print("Variable declaration part definition"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_part",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaration_part ::= function_declaration_part_opt declaration_part 
            {
              Object RESULT =null;
		 Logger.print("Function declaration part definition"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_part",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaration_part ::= procedure_declaration_part_opt declaration_part 
            {
              Object RESULT =null;
		 Logger.print("Procedure declaration part definition"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_part",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // const_definition_part_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_definition_part_opt",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // const_definition_part_opt ::= const_definition_part 
            {
              Object RESULT =null;
		 Logger.print("Line 79");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_definition_part_opt",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // const_definition_part ::= CONST const SEMICOLON const_part_ext 
            {
              Object RESULT =null;
		 Logger.print("Line 84");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_definition_part",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // const_part_ext ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_part_ext",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // const_part_ext ::= const SEMICOLON const_part_ext 
            {
              Object RESULT =null;
		 Logger.print("Line 89");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_part_ext",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // const ::= IDENTIFIER EQ constant 
            {
              Object RESULT =null;
		 Logger.print("Line 93");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // constant ::= number 
            {
              Object RESULT =null;
		 Logger.print("Line 97");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // constant ::= IDENTIFIER 
            {
              Object RESULT =null;
		 Logger.print("Line 98");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // constant ::= STRING 
            {
              Object RESULT =null;
		 Logger.print("Line 99");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // number ::= INTEGER_NUMBER 
            {
              Object RESULT =null;
		 Logger.print("Line 102");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // variable_declaration_part_opt ::= variable_declaration_part 
            {
              Object RESULT =null;
		 Logger.print("Line 106"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_part_opt",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // variable_declaration_part_opt ::= 
            {
              Object RESULT =null;
		Logger.print("VAZIO");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_part_opt",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // variable_declaration_part ::= VAR variable_declaration SEMICOLON variable_declaration_part_ext 
            {
              Object RESULT =null;
		 Logger.print("Line 111"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_part",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // variable_declaration_part ::= VAR variable_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_part",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // variable_declaration_part_ext ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_part_ext",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // variable_declaration_part_ext ::= variable_declaration SEMICOLON variable_declaration_part_ext 
            {
              Object RESULT =null;
		 Logger.print("Line 116"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_part_ext",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // variable_declaration ::= IDENTIFIER variable_sequence_opt COLON IDENTIFIER 
            {
              Object RESULT =null;
		 Logger.print("Line 120");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // variable_sequence_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_sequence_opt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // variable_sequence_opt ::= COMMA IDENTIFIER variable_sequence_opt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_sequence_opt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement_part ::= BEGIN expr END 
            {
              Object RESULT =null;
		 Logger.print("Line 123"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_part",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement_part ::= BEGIN atribuition_part_opt END 
            {
              Object RESULT =null;
		 Logger.print("Line 124");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_part",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // function_call_params_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call_params_opt",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // function_call_params_opt ::= IDENTIFIER function_call_params_ext 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call_params_opt",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // function_call_params_ext ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call_params_ext",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // function_call_params_ext ::= COMMA IDENTIFIER function_call_params_ext 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call_params_ext",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement_code ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_code",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$1 ::= 
            {
              Object RESULT =null;
 Logger.print("Line 133"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
 Logger.print("Line 134"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
 Logger.print("Line 135"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement_code ::= atribuition_part_opt NT$1 conditional_part_opt NT$2 result_function NT$3 END SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_code",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // atribuition_part_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atribuition_part_opt",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // atribuition_part_opt ::= atribuition_part atribuition_part_ext 
            {
              Object RESULT =null;
		 Logger.print("Line 142"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atribuition_part_opt",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // atribuition_part_ext ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atribuition_part_ext",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // atribuition_part_ext ::= atribuition_part atribuition_part_ext 
            {
              Object RESULT =null;
		 Logger.print("Line 147"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atribuition_part_ext",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // atribuition_part ::= IDENTIFIER COLON EQ expression 
            {
              Object RESULT =null;
		 Logger.print("Line 159"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atribuition_part",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // atribuition_part ::= IDENTIFIER COLON EQ constant SEMICOLON 
            {
              Object RESULT =null;
		 Logger.print("Line 158"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atribuition_part",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expression ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression ::= constant 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expression ::= call_function 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // call_function ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_function",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // call_function ::= IDENTIFIER LPAREN function_call_params_opt RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_function",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // conditional_part_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_part_opt",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // conditional_part_opt ::= conditional_part 
            {
              Object RESULT =null;
		 Logger.print("157"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_part_opt",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // conditional_part ::= condition conditional_part_ext 
            {
              Object RESULT =null;
		 Logger.print("162"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_part",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // conditional_part_ext ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_part_ext",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // conditional_part_ext ::= condition conditional_part_ext 
            {
              Object RESULT =null;
		 Logger.print("Line 167"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_part_ext",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // condition ::= IF LPAREN op_condition RPAREN THEN BEGIN conditional_body END 
            {
              Object RESULT =null;
		 Logger.print("Line 170"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // condition ::= ELSE IF LPAREN op_condition RPAREN THEN BEGIN conditional_body END 
            {
              Object RESULT =null;
		 Logger.print("Line 171"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // condition ::= ELSE BEGIN conditional_body END 
            {
              Object RESULT =null;
		 Logger.print("Line 172"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // op_condition ::= IDENTIFIER LT IDENTIFIER 
            {
              Object RESULT =null;
		 Logger.print("Line 177"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_condition",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // op_condition ::= IDENTIFIER GT IDENTIFIER 
            {
              Object RESULT =null;
		 Logger.print("Line 178"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_condition",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // op_condition ::= IDENTIFIER EQ IDENTIFIER 
            {
              Object RESULT =null;
		 Logger.print("Line 179"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_condition",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // op_condition ::= IDENTIFIER LTEQ IDENTIFIER 
            {
              Object RESULT =null;
		 Logger.print("Line 180"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_condition",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // op_condition ::= IDENTIFIER GTEQ IDENTIFIER 
            {
              Object RESULT =null;
		 Logger.print("Line 181"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_condition",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // op_condition ::= IDENTIFIER DIF IDENTIFIER 
            {
              Object RESULT =null;
		 Logger.print("Line 182"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_condition",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // op_condition ::= IDENTIFIER EQEQ IDENTIFIER 
            {
              Object RESULT =null;
		 Logger.print("Line 183"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_condition",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // conditional_body ::= atribuition_part_opt 
            {
              Object RESULT =null;
		 Logger.print("Line 188"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_body",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // result_function ::= IDENTIFIER COLON EQ IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;
		 Logger.print("Line 193"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("result_function",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // function_declaration_part_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration_part_opt",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // function_declaration_part_opt ::= function_dcl 
            {
              Object RESULT =null;
		 Logger.print("Line 197"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration_part_opt",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // function_dcl ::= function_heading function_body 
            {
              Object RESULT =null;
		 Logger.print("Line 201"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_dcl",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // function_heading ::= FUNCTION IDENTIFIER LPAREN parameter_list_opt RPAREN COLON result_type SEMICOLON 
            {
              Object RESULT =null;
		 Logger.print("Line 205"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_heading",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // parameter_list_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list_opt",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // parameter_list_opt ::= parameter_list 
            {
              Object RESULT =null;
		 Logger.print("Line 210");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list_opt",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // parameter_list ::= parameter_section parameter_section_ext 
            {
              Object RESULT =null;
		 Logger.print("Line 214");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // parameter_section_ext ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_section_ext",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // parameter_section_ext ::= SEMICOLON parameter_section parameter_section_ext 
            {
              Object RESULT =null;
		 Logger.print("Line 219");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_section_ext",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // type_identifier ::= IDENTIFIER 
            {
              Object RESULT =null;
		 Logger.print("Line 223");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_identifier",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // parameter_section ::= IDENTIFIER COLON parameter_type 
            {
              Object RESULT =null;
		 Logger.print("Line 227"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_section",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // parameter_type ::= type_identifier 
            {
              Object RESULT =null;
		 Logger.print("Line 231");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_type",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // result_type ::= type_identifier 
            {
              Object RESULT =null;
		 Logger.print("Line 235");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("result_type",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // function_body ::= variable_declaration_part_opt BEGIN function_statement 
            {
              Object RESULT =null;
		 Logger.print("239");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_body",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // function_statement ::= statement_code 
            {
              Object RESULT =null;
		 Logger.print("Line 244"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_statement",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // procedure_declaration_part_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration_part_opt",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // procedure_declaration_part_opt ::= procedure_dcl 
            {
              Object RESULT =null;
		 Logger.print("Line 197"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration_part_opt",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // procedure_dcl ::= procedure_heading procedure_body 
            {
              Object RESULT =null;
		 Logger.print("Line 201"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_dcl",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // procedure_heading ::= PROCEDURE IDENTIFIER LPAREN parameter_list_opt SEMICOLON VAR IDENTIFIER COLON constant RPAREN SEMICOLON 
            {
              Object RESULT =null;
		 Logger.print("Line 205"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_heading",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // procedure_body ::= variable_declaration_part_opt BEGIN function_statement 
            {
              Object RESULT =null;
		 Logger.print("287");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_body",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expr ::= expr PLUS expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expr ::= expr MINUS expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expr ::= expr MULT expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expr ::= expr DIV expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expr ::= INTEGER_NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
